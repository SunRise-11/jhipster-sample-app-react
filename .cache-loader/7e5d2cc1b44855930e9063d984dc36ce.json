{"remainingRequest":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/thread-loader/dist/cjs.js??ref--4-2!/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/ts-loader/index.js??ref--4-3!/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/tslint-loader/index.js!/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/src/main/webapp/app/modules/administration/logs/logs.tsx","dependencies":[{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/src/main/webapp/app/modules/administration/logs/logs.tsx","mtime":1522786297360},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/react-hot-loader/webpack.js","mtime":1505850161000},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/thread-loader/dist/cjs.js","mtime":0},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/ts-loader/index.js","mtime":1521265445000},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar React = require(\"react\");\nvar react_redux_1 = require(\"react-redux\");\nvar react_jhipster_1 = require(\"react-jhipster\");\nvar administration_reducer_1 = require(\"../administration.reducer\");\nvar LogsPage = /** @class */ (function (_super) {\n    tslib_1.__extends(LogsPage, _super);\n    function LogsPage() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {\n            filter: ''\n        };\n        _this.getLogs = function () {\n            if (!_this.props.isFetching) {\n                _this.props.getLoggers();\n            }\n        };\n        _this.changeLevel = function (loggerName, level) { return function () {\n            _this.props.changeLogLevel(loggerName, level);\n        }; };\n        _this.setFilter = function (evt) {\n            _this.setState({\n                filter: evt.target.value\n            });\n        };\n        _this.getClassName = function (level, check, className) { return (level === check ? \"btn btn-sm btn-\" + className : 'btn btn-sm btn-light'); };\n        _this.filterFn = function (l) { return l.name.toUpperCase().includes(_this.state.filter.toUpperCase()); };\n        return _this;\n    }\n    LogsPage.prototype.componentDidMount = function () {\n        this.props.getLoggers();\n    };\n    LogsPage.prototype.render = function () {\n        var _this = this;\n        var _a = this.props, logs = _a.logs, isFetching = _a.isFetching;\n        var filter = this.state.filter;\n        var loggers = logs ? logs.loggers : {};\n        return (React.createElement(\"div\", null,\n            React.createElement(\"h2\", null,\n                React.createElement(react_jhipster_1.Translate, { contentKey: \"logs.title\" }, \"Logs\")),\n            React.createElement(\"p\", null,\n                React.createElement(react_jhipster_1.Translate, { contentKey: \"logs.nbloggers\", interpolate: { total: loggers.length } },\n                    \"There are \",\n                    loggers.length,\n                    \" loggers.\")),\n            React.createElement(\"span\", null,\n                React.createElement(react_jhipster_1.Translate, { contentKey: \"logs.filter\" }, \"Filter\")),\n            React.createElement(\"input\", { type: \"text\", value: filter, onChange: this.setFilter, className: \"form-control\", disabled: isFetching }),\n            React.createElement(\"table\", { className: \"table table-sm table-striped table-bordered\" },\n                React.createElement(\"thead\", null,\n                    React.createElement(\"tr\", { title: \"click to order\" },\n                        React.createElement(\"th\", null,\n                            React.createElement(\"span\", null,\n                                React.createElement(react_jhipster_1.Translate, { contentKey: \"logs.table.name\" }, \"Name\"))),\n                        React.createElement(\"th\", null,\n                            React.createElement(\"span\", null,\n                                React.createElement(react_jhipster_1.Translate, { contentKey: \"logs.table.level\" }, \"Level\"))))),\n                React.createElement(\"tbody\", null, loggers.filter(this.filterFn).map(function (logger, i) { return (React.createElement(\"tr\", { key: \"log-row-\" + i },\n                    React.createElement(\"td\", null,\n                        React.createElement(\"small\", null, logger.name)),\n                    React.createElement(\"td\", null,\n                        React.createElement(\"button\", { disabled: isFetching, onClick: _this.changeLevel(logger.name, 'TRACE'), className: _this.getClassName(logger.level, 'TRACE', 'danger') }, \"TRACE\"),\n                        React.createElement(\"button\", { disabled: isFetching, onClick: _this.changeLevel(logger.name, 'DEBUG'), className: _this.getClassName(logger.level, 'DEBUG', 'warning') }, \"DEBUG\"),\n                        React.createElement(\"button\", { disabled: isFetching, onClick: _this.changeLevel(logger.name, 'INFO'), className: _this.getClassName(logger.level, 'INFO', 'info') }, \"INFO\"),\n                        React.createElement(\"button\", { disabled: isFetching, onClick: _this.changeLevel(logger.name, 'WARN'), className: _this.getClassName(logger.level, 'WARN', 'success') }, \"WARN\"),\n                        React.createElement(\"button\", { disabled: isFetching, onClick: _this.changeLevel(logger.name, 'ERROR'), className: _this.getClassName(logger.level, 'ERROR', 'primary') }, \"ERROR\")))); })))));\n    };\n    return LogsPage;\n}(React.Component));\nexports.LogsPage = LogsPage;\nvar mapStateToProps = function (_a) {\n    var administration = _a.administration;\n    return ({\n        logs: administration.logs,\n        isFetching: administration.isFetching\n    });\n};\nvar mapDispatchToProps = { getLoggers: administration_reducer_1.getLoggers, changeLogLevel: administration_reducer_1.changeLogLevel };\nexports.default = react_redux_1.connect(mapStateToProps, mapDispatchToProps)(LogsPage);\n",{"version":3,"file":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/src/main/webapp/app/modules/administration/logs/logs.tsx","sourceRoot":"","sources":["/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/tslint-loader/index.js!/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/src/main/webapp/app/modules/administration/logs/logs.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Translate } from 'react-jhipster';\n\nimport { getLoggers, changeLogLevel } from '../administration.reducer';\n\nexport interface ILogsPageProps {\n  isFetching?: boolean;\n  getLoggers: Function;\n  changeLogLevel: Function;\n  logs: any;\n}\n\nexport interface ILogsPageState {\n  filter: string;\n}\n\nexport class LogsPage extends React.Component<ILogsPageProps, ILogsPageState> {\n  state: ILogsPageState = {\n    filter: ''\n  };\n\n  componentDidMount() {\n    this.props.getLoggers();\n  }\n\n  getLogs = () => {\n    if (!this.props.isFetching) {\n      this.props.getLoggers();\n    }\n  };\n\n  changeLevel = (loggerName, level) => () => {\n    this.props.changeLogLevel(loggerName, level);\n  };\n\n  setFilter = evt => {\n    this.setState({\n      filter: evt.target.value\n    });\n  };\n\n  getClassName = (level, check, className) => (level === check ? `btn btn-sm btn-${className}` : 'btn btn-sm btn-light');\n\n  filterFn = l => l.name.toUpperCase().includes(this.state.filter.toUpperCase());\n\n  render() {\n    const { logs, isFetching } = this.props;\n    const { filter } = this.state;\n    const loggers = logs ? logs.loggers : {};\n    return (\n      <div>\n        <h2>\n          <Translate contentKey=\"logs.title\">Logs</Translate>\n        </h2>\n        <p>\n          <Translate contentKey=\"logs.nbloggers\" interpolate={{ total: loggers.length }}>\n            There are {loggers.length} loggers.\n          </Translate>\n        </p>\n\n        <span>\n          <Translate contentKey=\"logs.filter\">Filter</Translate>\n        </span>\n        <input type=\"text\" value={filter} onChange={this.setFilter} className=\"form-control\" disabled={isFetching} />\n\n        <table className=\"table table-sm table-striped table-bordered\">\n          <thead>\n            <tr title=\"click to order\">\n              <th>\n                <span>\n                  <Translate contentKey=\"logs.table.name\">Name</Translate>\n                </span>\n              </th>\n              <th>\n                <span>\n                  <Translate contentKey=\"logs.table.level\">Level</Translate>\n                </span>\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {loggers.filter(this.filterFn).map((logger, i) => (\n              <tr key={`log-row-${i}`}>\n                <td>\n                  <small>{logger.name}</small>\n                </td>\n                <td>\n                  <button\n                    disabled={isFetching}\n                    onClick={this.changeLevel(logger.name, 'TRACE')}\n                    className={this.getClassName(logger.level, 'TRACE', 'danger')}\n                  >\n                    TRACE\n                  </button>\n                  <button\n                    disabled={isFetching}\n                    onClick={this.changeLevel(logger.name, 'DEBUG')}\n                    className={this.getClassName(logger.level, 'DEBUG', 'warning')}\n                  >\n                    DEBUG\n                  </button>\n                  <button\n                    disabled={isFetching}\n                    onClick={this.changeLevel(logger.name, 'INFO')}\n                    className={this.getClassName(logger.level, 'INFO', 'info')}\n                  >\n                    INFO\n                  </button>\n                  <button\n                    disabled={isFetching}\n                    onClick={this.changeLevel(logger.name, 'WARN')}\n                    className={this.getClassName(logger.level, 'WARN', 'success')}\n                  >\n                    WARN\n                  </button>\n                  <button\n                    disabled={isFetching}\n                    onClick={this.changeLevel(logger.name, 'ERROR')}\n                    className={this.getClassName(logger.level, 'ERROR', 'primary')}\n                  >\n                    ERROR\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ administration }) => ({\n  logs: administration.logs,\n  isFetching: administration.isFetching\n});\n\nconst mapDispatchToProps = { getLoggers, changeLogLevel };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LogsPage);\n"]}]}