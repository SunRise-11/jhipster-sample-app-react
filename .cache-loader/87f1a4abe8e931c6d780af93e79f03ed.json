{"remainingRequest":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/thread-loader/dist/cjs.js??ref--4-2!/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/ts-loader/index.js??ref--4-3!/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/tslint-loader/index.js!/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/src/main/webapp/app/modules/account/settings/settings.tsx","dependencies":[{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/src/main/webapp/app/modules/account/settings/settings.tsx","mtime":1522786297181},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/react-hot-loader/webpack.js","mtime":1505850161000},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/thread-loader/dist/cjs.js","mtime":0},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/ts-loader/index.js","mtime":1521265445000},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar React = require(\"react\");\nvar reactstrap_1 = require(\"reactstrap\");\nvar react_redux_1 = require(\"react-redux\");\nvar react_jhipster_1 = require(\"react-jhipster\");\nvar availity_reactstrap_validation_1 = require(\"availity-reactstrap-validation\");\nvar translation_1 = require(\"app/config/translation\");\nvar authentication_1 = require(\"app/shared/reducers/authentication\");\nvar settings_reducer_1 = require(\"./settings.reducer\");\nvar successAlert = (React.createElement(reactstrap_1.Alert, { color: \"success\" },\n    React.createElement(\"strong\", null,\n        React.createElement(react_jhipster_1.Translate, { contentKey: \"settings.messages.success\" }, \"Settings saved!\"))));\nvar SettingsPage = /** @class */ (function (_super) {\n    tslib_1.__extends(SettingsPage, _super);\n    function SettingsPage() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {\n            account: _this.props.account\n        };\n        _this.setLangKey = function (event) {\n            _this.setState({\n                account: tslib_1.__assign({}, _this.state.account, { langKey: event.target.value })\n            });\n        };\n        _this.handleValidSubmit = function (event, values) {\n            var account = tslib_1.__assign({}, _this.state.account, values, { langKey: _this.state.account.langKey });\n            _this.props.saveAccountSettings(account);\n            event.persist();\n        };\n        return _this;\n    }\n    SettingsPage.prototype.componentDidMount = function () {\n        this.props.getSession();\n    };\n    SettingsPage.prototype.componentWillUnmount = function () {\n        this.props.reset();\n    };\n    SettingsPage.prototype.componentWillReceiveProps = function (nextProps) {\n        this.setState({\n            account: nextProps.account\n        });\n    };\n    SettingsPage.prototype.render = function () {\n        var account = this.state.account;\n        var updateSuccess = this.props.updateSuccess;\n        return (React.createElement(\"div\", null,\n            React.createElement(reactstrap_1.Row, { className: \"justify-content-center\" },\n                React.createElement(reactstrap_1.Col, { md: \"8\" },\n                    React.createElement(\"h2\", null,\n                        React.createElement(react_jhipster_1.Translate, { contentKey: \"settings.title\", interpolate: { username: account.login } },\n                            \"User settings for \",\n                            account.login)),\n                    updateSuccess ? successAlert : null,\n                    React.createElement(availity_reactstrap_validation_1.AvForm, { onValidSubmit: this.handleValidSubmit },\n                        React.createElement(availity_reactstrap_validation_1.AvField, { className: \"form-control\", name: \"firstName\", label: react_jhipster_1.translate('settings.form.firstname'), id: \"firstName\", placeholder: react_jhipster_1.translate('settings.form.firstname.placeholder'), validate: {\n                                required: { value: true, errorMessage: react_jhipster_1.translate('settings.messages.validate.firstname.required') },\n                                minLength: { value: 1, errorMessage: react_jhipster_1.translate('settings.messages.validate.firstname.minlength') },\n                                maxLength: { value: 50, errorMessage: react_jhipster_1.translate('settings.messages.validate.firstname.maxlength') }\n                            }, value: account.firstName }),\n                        React.createElement(availity_reactstrap_validation_1.AvField, { className: \"form-control\", name: \"lastName\", label: react_jhipster_1.translate('settings.form.lastname'), id: \"lastName\", placeholder: react_jhipster_1.translate('settings.form.lastname.placeholder'), validate: {\n                                required: { value: true, errorMessage: react_jhipster_1.translate('settings.messages.validate.lastname.required') },\n                                minLength: { value: 1, errorMessage: react_jhipster_1.translate('settings.messages.validate.lastname.minlength') },\n                                maxLength: { value: 50, errorMessage: react_jhipster_1.translate('settings.messages.validate.lastname.maxlength') }\n                            }, value: account.lastName }),\n                        React.createElement(availity_reactstrap_validation_1.AvField, { name: \"email\", label: react_jhipster_1.translate('global.form.email'), placeholder: react_jhipster_1.translate('global.form.email.placeholder'), type: \"email\", validate: {\n                                required: { value: true, errorMessage: react_jhipster_1.translate('global.messages.validate.email.required') },\n                                minLength: { value: 5, errorMessage: react_jhipster_1.translate('global.messages.validate.email.minlength') },\n                                maxLength: { value: 254, errorMessage: react_jhipster_1.translate('global.messages.validate.email.maxlength') }\n                            }, value: account.email }),\n                        React.createElement(availity_reactstrap_validation_1.AvField, { type: \"select\", id: \"langKey\", name: \"langKey\", className: \"form-control\", label: react_jhipster_1.translate('settings.form.language'), onChange: this.setLangKey, defaultValue: account.langKey }, translation_1.locales.map(function (lang) { return (React.createElement(\"option\", { value: lang, key: lang }, lang)); })),\n                        React.createElement(reactstrap_1.Button, { color: \"primary\", type: \"submit\" },\n                            React.createElement(react_jhipster_1.Translate, { contentKey: \"settings.form.button\" }, \"Save\")))))));\n    };\n    return SettingsPage;\n}(React.Component));\nexports.SettingsPage = SettingsPage;\nvar mapStateToProps = function (_a) {\n    var authentication = _a.authentication, settings = _a.settings;\n    return ({\n        account: authentication.account,\n        isAuthenticated: authentication.isAuthenticated,\n        updateSuccess: settings.updateSuccess,\n        updateFailure: settings.updateFailure\n    });\n};\nvar mapDispatchToProps = { getSession: authentication_1.getSession, saveAccountSettings: settings_reducer_1.saveAccountSettings, reset: settings_reducer_1.reset };\nexports.default = react_redux_1.connect(mapStateToProps, mapDispatchToProps)(SettingsPage);\n",{"version":3,"file":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/src/main/webapp/app/modules/account/settings/settings.tsx","sourceRoot":"","sources":["/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/tslint-loader/index.js!/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/src/main/webapp/app/modules/account/settings/settings.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Button, Col, Alert, Row } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport { Translate, translate } from 'react-jhipster';\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\n\nimport { locales } from 'app/config/translation';\nimport { getSession } from 'app/shared/reducers/authentication';\nimport { saveAccountSettings, reset } from './settings.reducer';\n\nconst successAlert = (\n  <Alert color=\"success\">\n    <strong>\n      <Translate contentKey=\"settings.messages.success\">Settings saved!</Translate>\n    </strong>\n  </Alert>\n);\n\nexport interface IUserSettingsProps {\n  account: any;\n  getSession: Function;\n  saveAccountSettings: Function;\n  reset: Function;\n  updateSuccess: boolean;\n}\n\nexport interface IUserSettingsState {\n  account: any;\n}\n\nexport class SettingsPage extends React.Component<IUserSettingsProps, IUserSettingsState> {\n  state: IUserSettingsState = {\n    account: this.props.account\n  };\n\n  componentDidMount() {\n    this.props.getSession();\n  }\n\n  componentWillUnmount() {\n    this.props.reset();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      account: nextProps.account\n    });\n  }\n\n  setLangKey = event => {\n    this.setState({\n      account: {\n        ...this.state.account,\n        langKey: event.target.value\n      }\n    });\n  };\n\n  handleValidSubmit = (event, values) => {\n    const account = {\n      ...this.state.account,\n      ...values,\n      langKey: this.state.account.langKey\n    };\n\n    this.props.saveAccountSettings(account);\n    event.persist();\n  };\n\n  render() {\n    const { account } = this.state;\n    const { updateSuccess } = this.props;\n\n    return (\n      <div>\n        <Row className=\"justify-content-center\">\n          <Col md=\"8\">\n            <h2>\n              <Translate contentKey=\"settings.title\" interpolate={{ username: account.login }}>\n                User settings for {account.login}\n              </Translate>\n            </h2>\n            {updateSuccess ? successAlert : null}\n            <AvForm onValidSubmit={this.handleValidSubmit}>\n              {/* First name */}\n              <AvField\n                className=\"form-control\"\n                name=\"firstName\"\n                label={translate('settings.form.firstname')}\n                id=\"firstName\"\n                placeholder={translate('settings.form.firstname.placeholder')}\n                validate={{\n                  required: { value: true, errorMessage: translate('settings.messages.validate.firstname.required') },\n                  minLength: { value: 1, errorMessage: translate('settings.messages.validate.firstname.minlength') },\n                  maxLength: { value: 50, errorMessage: translate('settings.messages.validate.firstname.maxlength') }\n                }}\n                value={account.firstName}\n              />\n              {/* Last name */}\n              <AvField\n                className=\"form-control\"\n                name=\"lastName\"\n                label={translate('settings.form.lastname')}\n                id=\"lastName\"\n                placeholder={translate('settings.form.lastname.placeholder')}\n                validate={{\n                  required: { value: true, errorMessage: translate('settings.messages.validate.lastname.required') },\n                  minLength: { value: 1, errorMessage: translate('settings.messages.validate.lastname.minlength') },\n                  maxLength: { value: 50, errorMessage: translate('settings.messages.validate.lastname.maxlength') }\n                }}\n                value={account.lastName}\n              />\n              {/* Email */}\n              <AvField\n                name=\"email\"\n                label={translate('global.form.email')}\n                placeholder={translate('global.form.email.placeholder')}\n                type=\"email\"\n                validate={{\n                  required: { value: true, errorMessage: translate('global.messages.validate.email.required') },\n                  minLength: { value: 5, errorMessage: translate('global.messages.validate.email.minlength') },\n                  maxLength: { value: 254, errorMessage: translate('global.messages.validate.email.maxlength') }\n                }}\n                value={account.email}\n              />\n              {/* Language key */}\n              <AvField\n                type=\"select\"\n                id=\"langKey\"\n                name=\"langKey\"\n                className=\"form-control\"\n                label={translate('settings.form.language')}\n                onChange={this.setLangKey}\n                defaultValue={account.langKey}\n              >\n                {/* TODO: Add findLanguageFromKey translation to options */}\n                {locales.map(lang => (\n                  <option value={lang} key={lang}>\n                    {lang}\n                  </option>\n                ))}\n              </AvField>\n              <Button color=\"primary\" type=\"submit\">\n                <Translate contentKey=\"settings.form.button\">Save</Translate>\n              </Button>\n            </AvForm>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ authentication, settings }) => ({\n  account: authentication.account,\n  isAuthenticated: authentication.isAuthenticated,\n  updateSuccess: settings.updateSuccess,\n  updateFailure: settings.updateFailure\n});\n\nconst mapDispatchToProps = { getSession, saveAccountSettings, reset };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingsPage);\n"]}]}