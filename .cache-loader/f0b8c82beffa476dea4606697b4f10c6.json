{"remainingRequest":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/thread-loader/dist/cjs.js??ref--4-2!/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/ts-loader/index.js??ref--4-3!/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/tslint-loader/index.js!/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/src/main/webapp/app/modules/administration/administration.reducer.ts","dependencies":[{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/src/main/webapp/app/modules/administration/administration.reducer.ts","mtime":1522786297572},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/react-hot-loader/webpack.js","mtime":1505850161000},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/thread-loader/dist/cjs.js","mtime":0},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/ts-loader/index.js","mtime":1521265445000},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\nvar _this = this;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar axios_1 = require(\"axios\");\nvar action_type_util_1 = require(\"app/shared/reducers/action-type.util\");\nexports.ACTION_TYPES = {\n    FETCH_GATEWAY_ROUTE: 'administration/FETCH_GATEWAY_ROUTE',\n    FETCH_LOGS: 'administration/FETCH_LOGS',\n    FETCH_LOGS_CHANGE_LEVEL: 'administration/FETCH_LOGS_CHANGE_LEVEL',\n    FETCH_HEALTH: 'administration/FETCH_HEALTH',\n    FETCH_METRICS: 'administration/FETCH_METRICS',\n    FETCH_THREAD_DUMP: 'administration/FETCH_THREAD_DUMP',\n    FETCH_CONFIGURATIONS: 'administration/FETCH_CONFIGURATIONS',\n    FETCH_ENV: 'administration/FETCH_ENV',\n    FETCH_AUDITS: 'administration/FETCH_AUDITS'\n};\nvar initialState = {\n    loading: false,\n    errorMessage: null,\n    gateway: {\n        routes: []\n    },\n    logs: {\n        loggers: []\n    },\n    health: {},\n    metrics: {},\n    threadDump: [],\n    configuration: {\n        configProps: {},\n        env: {}\n    },\n    audits: [],\n    totalItems: 0\n};\n// Reducer\nexports.default = (function (state, action) {\n    if (state === void 0) { state = initialState; }\n    switch (action.type) {\n        case action_type_util_1.REQUEST(exports.ACTION_TYPES.FETCH_GATEWAY_ROUTE):\n        case action_type_util_1.REQUEST(exports.ACTION_TYPES.FETCH_METRICS):\n            return tslib_1.__assign({}, state, { errorMessage: null, loading: true });\n        case action_type_util_1.REQUEST(exports.ACTION_TYPES.FETCH_THREAD_DUMP):\n            return tslib_1.__assign({}, state, { errorMessage: null, loading: true });\n        case action_type_util_1.REQUEST(exports.ACTION_TYPES.FETCH_LOGS):\n        case action_type_util_1.REQUEST(exports.ACTION_TYPES.FETCH_CONFIGURATIONS):\n        case action_type_util_1.REQUEST(exports.ACTION_TYPES.FETCH_ENV):\n        case action_type_util_1.REQUEST(exports.ACTION_TYPES.FETCH_AUDITS):\n        case action_type_util_1.REQUEST(exports.ACTION_TYPES.FETCH_HEALTH):\n            return tslib_1.__assign({}, state, { errorMessage: null, loading: true });\n        case action_type_util_1.FAILURE(exports.ACTION_TYPES.FETCH_GATEWAY_ROUTE):\n        case action_type_util_1.FAILURE(exports.ACTION_TYPES.FETCH_METRICS):\n        case action_type_util_1.FAILURE(exports.ACTION_TYPES.FETCH_THREAD_DUMP):\n        case action_type_util_1.FAILURE(exports.ACTION_TYPES.FETCH_LOGS):\n        case action_type_util_1.FAILURE(exports.ACTION_TYPES.FETCH_CONFIGURATIONS):\n        case action_type_util_1.FAILURE(exports.ACTION_TYPES.FETCH_ENV):\n        case action_type_util_1.FAILURE(exports.ACTION_TYPES.FETCH_AUDITS):\n        case action_type_util_1.FAILURE(exports.ACTION_TYPES.FETCH_HEALTH):\n            return tslib_1.__assign({}, state, { loading: false, errorMessage: action.payload });\n        case action_type_util_1.SUCCESS(exports.ACTION_TYPES.FETCH_GATEWAY_ROUTE):\n            return tslib_1.__assign({}, state, { loading: false, gateway: {\n                    routes: action.payload.data\n                } });\n        case action_type_util_1.SUCCESS(exports.ACTION_TYPES.FETCH_METRICS):\n            return tslib_1.__assign({}, state, { loading: false, metrics: action.payload.data });\n        case action_type_util_1.SUCCESS(exports.ACTION_TYPES.FETCH_THREAD_DUMP):\n            return tslib_1.__assign({}, state, { loading: false, threadDump: action.payload.data });\n        case action_type_util_1.SUCCESS(exports.ACTION_TYPES.FETCH_LOGS):\n            return tslib_1.__assign({}, state, { loading: false, logs: {\n                    loggers: action.payload.data\n                } });\n        case action_type_util_1.SUCCESS(exports.ACTION_TYPES.FETCH_CONFIGURATIONS):\n            return tslib_1.__assign({}, state, { loading: false, configuration: tslib_1.__assign({}, state.configuration, { configProps: action.payload.data }) });\n        case action_type_util_1.SUCCESS(exports.ACTION_TYPES.FETCH_ENV):\n            return tslib_1.__assign({}, state, { loading: false, configuration: tslib_1.__assign({}, state.configuration, { env: action.payload.data }) });\n        case action_type_util_1.SUCCESS(exports.ACTION_TYPES.FETCH_AUDITS):\n            return tslib_1.__assign({}, state, { loading: false, audits: action.payload.data, totalItems: action.payload.headers['x-total-count'] });\n        case action_type_util_1.SUCCESS(exports.ACTION_TYPES.FETCH_HEALTH):\n            return tslib_1.__assign({}, state, { loading: false, health: action.payload.data });\n        default:\n            return state;\n    }\n});\n// Actions\nexports.gatewayRoutes = function () { return ({\n    type: exports.ACTION_TYPES.FETCH_GATEWAY_ROUTE,\n    payload: axios_1.default.get('/api/gateway/routes')\n}); };\nexports.systemHealth = function () { return ({\n    type: exports.ACTION_TYPES.FETCH_HEALTH,\n    payload: axios_1.default.get('/management/health')\n}); };\nexports.systemMetrics = function () { return ({\n    type: exports.ACTION_TYPES.FETCH_METRICS,\n    payload: axios_1.default.get('/management/metrics')\n}); };\nexports.systemThreadDump = function () { return ({\n    type: exports.ACTION_TYPES.FETCH_THREAD_DUMP,\n    payload: axios_1.default.get('/management/threaddump')\n}); };\nexports.getLoggers = function () { return ({\n    type: exports.ACTION_TYPES.FETCH_LOGS,\n    payload: axios_1.default.get('/management/logs')\n}); };\nexports.changeLogLevel = function (name, level) {\n    var body = {\n        level: level,\n        name: name\n    };\n    return function (dispatch) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n        return tslib_1.__generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, dispatch({\n                        type: exports.ACTION_TYPES.FETCH_LOGS_CHANGE_LEVEL,\n                        payload: axios_1.default.put('/management/logs', body)\n                    })];\n                case 1:\n                    _a.sent();\n                    dispatch(exports.getLoggers());\n                    return [2 /*return*/];\n            }\n        });\n    }); };\n};\nexports.getConfigurations = function () { return ({\n    type: exports.ACTION_TYPES.FETCH_CONFIGURATIONS,\n    payload: axios_1.default.get('/management/configprops')\n}); };\nexports.getEnv = function () { return ({\n    type: exports.ACTION_TYPES.FETCH_ENV,\n    payload: axios_1.default.get('/management/env')\n}); };\nexports.getAudits = function (page, size, sort, fromDate, toDate) {\n    var requestUrl = \"/management/audits\" + (sort ? \"?page=\" + page + \"&size=\" + size + \"&sort=\" + sort : '');\n    if (fromDate) {\n        requestUrl += \"&fromDate=\" + fromDate;\n    }\n    if (toDate) {\n        requestUrl += \"&toDate=\" + toDate;\n    }\n    return {\n        type: exports.ACTION_TYPES.FETCH_AUDITS,\n        payload: axios_1.default.get(requestUrl)\n    };\n};\n",{"version":3,"file":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/src/main/webapp/app/modules/administration/administration.reducer.ts","sourceRoot":"","sources":["/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/tslint-loader/index.js!/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/src/main/webapp/app/modules/administration/administration.reducer.ts"],"names":[],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nimport { REQUEST, SUCCESS, FAILURE } from 'app/shared/reducers/action-type.util';\n\nexport const ACTION_TYPES = {\n  FETCH_GATEWAY_ROUTE: 'administration/FETCH_GATEWAY_ROUTE',\n  FETCH_LOGS: 'administration/FETCH_LOGS',\n  FETCH_LOGS_CHANGE_LEVEL: 'administration/FETCH_LOGS_CHANGE_LEVEL',\n  FETCH_HEALTH: 'administration/FETCH_HEALTH',\n  FETCH_METRICS: 'administration/FETCH_METRICS',\n  FETCH_THREAD_DUMP: 'administration/FETCH_THREAD_DUMP',\n  FETCH_CONFIGURATIONS: 'administration/FETCH_CONFIGURATIONS',\n  FETCH_ENV: 'administration/FETCH_ENV',\n  FETCH_AUDITS: 'administration/FETCH_AUDITS'\n};\n\nconst initialState = {\n  loading: false,\n  errorMessage: null,\n  gateway: {\n    routes: []\n  },\n  logs: {\n    loggers: []\n  },\n  health: {},\n  metrics: {},\n  threadDump: [],\n  configuration: {\n    configProps: {},\n    env: {}\n  },\n  audits: [],\n  totalItems: 0\n};\n\n// Reducer\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.FETCH_GATEWAY_ROUTE):\n    case REQUEST(ACTION_TYPES.FETCH_METRICS):\n      return {\n        ...state,\n        errorMessage: null,\n        loading: true\n      };\n    case REQUEST(ACTION_TYPES.FETCH_THREAD_DUMP):\n      return {\n        ...state,\n        errorMessage: null,\n        loading: true\n      };\n    case REQUEST(ACTION_TYPES.FETCH_LOGS):\n    case REQUEST(ACTION_TYPES.FETCH_CONFIGURATIONS):\n    case REQUEST(ACTION_TYPES.FETCH_ENV):\n    case REQUEST(ACTION_TYPES.FETCH_AUDITS):\n    case REQUEST(ACTION_TYPES.FETCH_HEALTH):\n      return {\n        ...state,\n        errorMessage: null,\n        loading: true\n      };\n    case FAILURE(ACTION_TYPES.FETCH_GATEWAY_ROUTE):\n    case FAILURE(ACTION_TYPES.FETCH_METRICS):\n    case FAILURE(ACTION_TYPES.FETCH_THREAD_DUMP):\n    case FAILURE(ACTION_TYPES.FETCH_LOGS):\n    case FAILURE(ACTION_TYPES.FETCH_CONFIGURATIONS):\n    case FAILURE(ACTION_TYPES.FETCH_ENV):\n    case FAILURE(ACTION_TYPES.FETCH_AUDITS):\n    case FAILURE(ACTION_TYPES.FETCH_HEALTH):\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.payload\n      };\n    case SUCCESS(ACTION_TYPES.FETCH_GATEWAY_ROUTE):\n      return {\n        ...state,\n        loading: false,\n        gateway: {\n          routes: action.payload.data\n        }\n      };\n    case SUCCESS(ACTION_TYPES.FETCH_METRICS):\n      return {\n        ...state,\n        loading: false,\n        metrics: action.payload.data\n      };\n    case SUCCESS(ACTION_TYPES.FETCH_THREAD_DUMP):\n      return {\n        ...state,\n        loading: false,\n        threadDump: action.payload.data\n      };\n    case SUCCESS(ACTION_TYPES.FETCH_LOGS):\n      return {\n        ...state,\n        loading: false,\n        logs: {\n          loggers: action.payload.data\n        }\n      };\n    case SUCCESS(ACTION_TYPES.FETCH_CONFIGURATIONS):\n      return {\n        ...state,\n        loading: false,\n        configuration: {\n          ...state.configuration,\n          configProps: action.payload.data\n        }\n      };\n    case SUCCESS(ACTION_TYPES.FETCH_ENV):\n      return {\n        ...state,\n        loading: false,\n        configuration: {\n          ...state.configuration,\n          env: action.payload.data\n        }\n      };\n    case SUCCESS(ACTION_TYPES.FETCH_AUDITS):\n      return {\n        ...state,\n        loading: false,\n        audits: action.payload.data,\n        totalItems: action.payload.headers['x-total-count']\n      };\n    case SUCCESS(ACTION_TYPES.FETCH_HEALTH):\n      return {\n        ...state,\n        loading: false,\n        health: action.payload.data\n      };\n    default:\n      return state;\n  }\n};\n\n// Actions\nexport const gatewayRoutes = () => ({\n  type: ACTION_TYPES.FETCH_GATEWAY_ROUTE,\n  payload: axios.get('/api/gateway/routes')\n});\n\nexport const systemHealth = () => ({\n  type: ACTION_TYPES.FETCH_HEALTH,\n  payload: axios.get('/management/health')\n});\n\nexport const systemMetrics = () => ({\n  type: ACTION_TYPES.FETCH_METRICS,\n  payload: axios.get('/management/metrics')\n});\n\nexport const systemThreadDump = () => ({\n  type: ACTION_TYPES.FETCH_THREAD_DUMP,\n  payload: axios.get('/management/threaddump')\n});\n\nexport const getLoggers = () => ({\n  type: ACTION_TYPES.FETCH_LOGS,\n  payload: axios.get('/management/logs')\n});\n\nexport const changeLogLevel = (name, level) => {\n  const body = {\n    level,\n    name\n  };\n  return async dispatch => {\n    await dispatch({\n      type: ACTION_TYPES.FETCH_LOGS_CHANGE_LEVEL,\n      payload: axios.put('/management/logs', body)\n    });\n    dispatch(getLoggers());\n  };\n};\n\nexport const getConfigurations = () => ({\n  type: ACTION_TYPES.FETCH_CONFIGURATIONS,\n  payload: axios.get('/management/configprops')\n});\n\nexport const getEnv = () => ({\n  type: ACTION_TYPES.FETCH_ENV,\n  payload: axios.get('/management/env')\n});\n\nexport const getAudits = (page, size, sort, fromDate, toDate) => {\n  let requestUrl = `/management/audits${sort ? `?page=${page}&size=${size}&sort=${sort}` : ''}`;\n  if (fromDate) {\n    requestUrl += `&fromDate=${fromDate}`;\n  }\n  if (toDate) {\n    requestUrl += `&toDate=${toDate}`;\n  }\n  return {\n    type: ACTION_TYPES.FETCH_AUDITS,\n    payload: axios.get(requestUrl)\n  };\n};\n"]}]}