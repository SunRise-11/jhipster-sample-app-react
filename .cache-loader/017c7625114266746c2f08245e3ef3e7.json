{"remainingRequest":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/thread-loader/dist/cjs.js??ref--4-2!/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/ts-loader/index.js??ref--4-3!/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/tslint-loader/index.js!/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/src/main/webapp/app/modules/account/password-reset/init/password-reset-init.tsx","dependencies":[{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/src/main/webapp/app/modules/account/password-reset/init/password-reset-init.tsx","mtime":1522786297131},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/react-hot-loader/webpack.js","mtime":1505850161000},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/thread-loader/dist/cjs.js","mtime":0},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/ts-loader/index.js","mtime":1521265445000},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar React = require(\"react\");\nvar react_jhipster_1 = require(\"react-jhipster\");\nvar react_redux_1 = require(\"react-redux\");\nvar availity_reactstrap_validation_1 = require(\"availity-reactstrap-validation\");\nvar reactstrap_1 = require(\"reactstrap\");\nvar password_reset_reducer_1 = require(\"../password-reset.reducer\");\nvar PasswordResetInit = /** @class */ (function (_super) {\n    tslib_1.__extends(PasswordResetInit, _super);\n    function PasswordResetInit() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.handleValidSubmit = function (event, values) {\n            _this.props.handlePasswordResetInit(values.email);\n            event.preventDefault();\n        };\n        return _this;\n    }\n    PasswordResetInit.prototype.componentWillUnmount = function () {\n        this.props.reset();\n    };\n    PasswordResetInit.prototype.render = function () {\n        var _a = this.props, resetPasswordSuccess = _a.resetPasswordSuccess, resetPasswordFailure = _a.resetPasswordFailure;\n        var alertMessage = null;\n        if (resetPasswordFailure) {\n            alertMessage = (React.createElement(reactstrap_1.Alert, { color: \"danger\" },\n                React.createElement(react_jhipster_1.Translate, { contentKey: \"reset.request.messages.notfound\" },\n                    React.createElement(\"strong\", null, \"Email address isn't registered!\"),\n                    \" Please check and try again\")));\n        }\n        else {\n            if (resetPasswordSuccess) {\n                alertMessage = (React.createElement(reactstrap_1.Alert, { color: \"success\" },\n                    React.createElement(react_jhipster_1.Translate, { contentKey: \"reset.request.messages.success\" }, \"Check your emails for details on how to reset your password.\")));\n            }\n            else {\n                alertMessage = null;\n            }\n        }\n        return (React.createElement(\"div\", null,\n            React.createElement(\"div\", { className: \"row justify-content-center\" },\n                React.createElement(\"div\", { className: \"col-md-8\" },\n                    React.createElement(\"h1\", null,\n                        React.createElement(react_jhipster_1.Translate, { contentKey: \"reset.request.title\" }, \"Reset your password\")),\n                    React.createElement(reactstrap_1.Alert, { color: \"warning\" },\n                        React.createElement(\"p\", null,\n                            React.createElement(react_jhipster_1.Translate, { contentKey: \"reset.request.messages.info\" }, \"Enter the email address you used to register\"))),\n                    alertMessage,\n                    React.createElement(availity_reactstrap_validation_1.AvForm, { onValidSubmit: this.handleValidSubmit },\n                        React.createElement(availity_reactstrap_validation_1.AvField, { name: \"email\", label: react_jhipster_1.translate('global.form.email'), placeholder: react_jhipster_1.translate('global.form.email.placeholder'), type: \"email\", validate: {\n                                required: { value: true, errorMessage: react_jhipster_1.translate('global.messages.validate.email.required') },\n                                minLength: { value: 5, errorMessage: react_jhipster_1.translate('global.messages.validate.email.minlength') },\n                                maxLength: { value: 254, errorMessage: react_jhipster_1.translate('global.messages.validate.email.maxlength') }\n                            } }),\n                        React.createElement(reactstrap_1.Button, { color: \"primary\", type: \"submit\" },\n                            React.createElement(react_jhipster_1.Translate, { contentKey: \"reset.request.form.button\" }, \"Reset password\")))))));\n    };\n    return PasswordResetInit;\n}(React.Component));\nexports.PasswordResetInit = PasswordResetInit;\nvar mapStateToProps = function (_a) {\n    var passwordReset = _a.passwordReset;\n    return ({\n        resetPasswordSuccess: passwordReset.resetPasswordSuccess,\n        resetPasswordFailure: passwordReset.resetPasswordFailure\n    });\n};\nvar mapDispatchToProps = { handlePasswordResetInit: password_reset_reducer_1.handlePasswordResetInit, reset: password_reset_reducer_1.reset };\nexports.default = react_redux_1.connect(mapStateToProps, mapDispatchToProps)(PasswordResetInit);\n",{"version":3,"file":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/src/main/webapp/app/modules/account/password-reset/init/password-reset-init.tsx","sourceRoot":"","sources":["/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/tslint-loader/index.js!/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/src/main/webapp/app/modules/account/password-reset/init/password-reset-init.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAC/B,iDAAsD;AACtD,2CAAsC;AACtC,iFAAiE;AACjE,yCAA2C;AAE3C,oEAA2E;AAS3E;IAAuC,6CAAwC;IAA/E;QAAA,qEAoEC;QA/DC,uBAAiB,GAAG,UAAC,KAAK,EAAE,MAAM;YAChC,KAAI,CAAC,KAAK,CAAC,uBAAuB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACjD,KAAK,CAAC,cAAc,EAAE,CAAC;QACzB,CAAC,CAAC;;IA4DJ,CAAC;IAnEC,gDAAoB,GAApB;QACE,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;IACrB,CAAC;IAOD,kCAAM,GAAN;QACQ,IAAA,eAA2D,EAAzD,8CAAoB,EAAE,8CAAoB,CAAgB;QAClE,IAAI,YAAY,GAAG,IAAI,CAAC;QAExB,IAAI,oBAAoB,EAAE;YACxB,YAAY,GAAG,CACb,oBAAC,kBAAK,IAAC,KAAK,EAAC,QAAQ;gBACnB,oBAAC,0BAAS,IAAC,UAAU,EAAC,iCAAiC;oBACrD,sEAAgD;kDACtC,CACN,CACT,CAAC;SACH;aAAM;YACL,IAAI,oBAAoB,EAAE;gBACxB,YAAY,GAAG,CACb,oBAAC,kBAAK,IAAC,KAAK,EAAC,SAAS;oBACpB,oBAAC,0BAAS,IAAC,UAAU,EAAC,gCAAgC,mEAAyE,CACzH,CACT,CAAC;aACH;iBAAM;gBACL,YAAY,GAAG,IAAI,CAAC;aACrB;SACF;QAED,OAAO,CACL;YACE,6BAAK,SAAS,EAAC,4BAA4B;gBACzC,6BAAK,SAAS,EAAC,UAAU;oBACvB;wBACE,oBAAC,0BAAS,IAAC,UAAU,EAAC,qBAAqB,0BAAgC,CACxE;oBACL,oBAAC,kBAAK,IAAC,KAAK,EAAC,SAAS;wBACpB;4BACE,oBAAC,0BAAS,IAAC,UAAU,EAAC,6BAA6B,mDAAyD,CAC1G,CACE;oBACP,YAAY;oBACb,oBAAC,uCAAM,IAAC,aAAa,EAAE,IAAI,CAAC,iBAAiB;wBAC3C,oBAAC,wCAAO,IACN,IAAI,EAAC,OAAO,EACZ,KAAK,EAAE,0BAAS,CAAC,mBAAmB,CAAC,EACrC,WAAW,EAAE,0BAAS,CAAC,+BAA+B,CAAC,EACvD,IAAI,EAAC,OAAO,EACZ,QAAQ,EAAE;gCACR,QAAQ,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,YAAY,EAAE,0BAAS,CAAC,yCAAyC,CAAC,EAAE;gCAC7F,SAAS,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,YAAY,EAAE,0BAAS,CAAC,0CAA0C,CAAC,EAAE;gCAC5F,SAAS,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,YAAY,EAAE,0BAAS,CAAC,0CAA0C,CAAC,EAAE;6BAC/F,GACD;wBACF,oBAAC,mBAAM,IAAC,KAAK,EAAC,SAAS,EAAC,IAAI,EAAC,QAAQ;4BACnC,oBAAC,0BAAS,IAAC,UAAU,EAAC,2BAA2B,qBAA2B,CACrE,CACF,CACL,CACF,CACF,CACP,CAAC;IACJ,CAAC;IACH,wBAAC;AAAD,CAAC,AApED,CAAuC,KAAK,CAAC,SAAS,GAoErD;AApEY,8CAAiB;AAsE9B,IAAM,eAAe,GAAG,UAAC,EAAiB;QAAf,gCAAa;IAAO,OAAA,CAAC;QAC9C,oBAAoB,EAAE,aAAa,CAAC,oBAAoB;QACxD,oBAAoB,EAAE,aAAa,CAAC,oBAAoB;KACzD,CAAC;AAH6C,CAG7C,CAAC;AAEH,IAAM,kBAAkB,GAAG,EAAE,uBAAuB,kDAAA,EAAE,KAAK,gCAAA,EAAE,CAAC;AAE9D,kBAAe,qBAAO,CAAC,eAAe,EAAE,kBAAkB,CAAC,CAAC,iBAAiB,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { Translate, translate } from 'react-jhipster';\nimport { connect } from 'react-redux';\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\nimport { Button, Alert } from 'reactstrap';\n\nimport { handlePasswordResetInit, reset } from '../password-reset.reducer';\n\nexport interface IPasswordResetInitProps {\n  handlePasswordResetInit: Function;\n  reset: Function;\n  resetPasswordSuccess: boolean;\n  resetPasswordFailure: boolean;\n}\n\nexport class PasswordResetInit extends React.Component<IPasswordResetInitProps> {\n  componentWillUnmount() {\n    this.props.reset();\n  }\n\n  handleValidSubmit = (event, values) => {\n    this.props.handlePasswordResetInit(values.email);\n    event.preventDefault();\n  };\n\n  render() {\n    const { resetPasswordSuccess, resetPasswordFailure } = this.props;\n    let alertMessage = null;\n\n    if (resetPasswordFailure) {\n      alertMessage = (\n        <Alert color=\"danger\">\n          <Translate contentKey=\"reset.request.messages.notfound\">\n            <strong>Email address isn't registered!</strong> Please check and try again\n          </Translate>\n        </Alert>\n      );\n    } else {\n      if (resetPasswordSuccess) {\n        alertMessage = (\n          <Alert color=\"success\">\n            <Translate contentKey=\"reset.request.messages.success\">Check your emails for details on how to reset your password.</Translate>\n          </Alert>\n        );\n      } else {\n        alertMessage = null;\n      }\n    }\n\n    return (\n      <div>\n        <div className=\"row justify-content-center\">\n          <div className=\"col-md-8\">\n            <h1>\n              <Translate contentKey=\"reset.request.title\">Reset your password</Translate>\n            </h1>\n            <Alert color=\"warning\">\n              <p>\n                <Translate contentKey=\"reset.request.messages.info\">Enter the email address you used to register</Translate>\n              </p>\n            </Alert>\n            {alertMessage}\n            <AvForm onValidSubmit={this.handleValidSubmit}>\n              <AvField\n                name=\"email\"\n                label={translate('global.form.email')}\n                placeholder={translate('global.form.email.placeholder')}\n                type=\"email\"\n                validate={{\n                  required: { value: true, errorMessage: translate('global.messages.validate.email.required') },\n                  minLength: { value: 5, errorMessage: translate('global.messages.validate.email.minlength') },\n                  maxLength: { value: 254, errorMessage: translate('global.messages.validate.email.maxlength') }\n                }}\n              />\n              <Button color=\"primary\" type=\"submit\">\n                <Translate contentKey=\"reset.request.form.button\">Reset password</Translate>\n              </Button>\n            </AvForm>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ passwordReset }) => ({\n  resetPasswordSuccess: passwordReset.resetPasswordSuccess,\n  resetPasswordFailure: passwordReset.resetPasswordFailure\n});\n\nconst mapDispatchToProps = { handlePasswordResetInit, reset };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PasswordResetInit);\n"]}]}