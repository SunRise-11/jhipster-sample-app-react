{"remainingRequest":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/thread-loader/dist/cjs.js??ref--4-2!/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/ts-loader/index.js??ref--4-3!/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/tslint-loader/index.js!/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/src/main/webapp/app/modules/administration/metrics/thread-item.tsx","dependencies":[{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/src/main/webapp/app/modules/administration/metrics/thread-item.tsx","mtime":1522786297554},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/react-hot-loader/webpack.js","mtime":1505850161000},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/thread-loader/dist/cjs.js","mtime":0},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/ts-loader/index.js","mtime":1521265445000},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar React = require(\"react\");\nvar reactstrap_1 = require(\"reactstrap\");\nvar ThreadItem = /** @class */ (function (_super) {\n    tslib_1.__extends(ThreadItem, _super);\n    function ThreadItem() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {\n            collapse: false\n        };\n        _this.toggleStackTrace = function () {\n            _this.setState({\n                collapse: !_this.state.collapse\n            });\n        };\n        return _this;\n    }\n    ThreadItem.prototype.render = function () {\n        var threadDumpInfo = this.props.threadDumpInfo;\n        return (React.createElement(\"div\", null,\n            React.createElement(\"a\", { onClick: this.toggleStackTrace, style: { color: 'hotpink' } }, this.state.collapse ? React.createElement(\"span\", null, \"Hide StackTrace\") : React.createElement(\"span\", null, \"Show StackTrace\")),\n            React.createElement(reactstrap_1.Collapse, { isOpen: this.state.collapse },\n                React.createElement(reactstrap_1.Card, null,\n                    React.createElement(reactstrap_1.CardBody, null,\n                        React.createElement(\"div\", { className: \"row break\", style: { overflowX: 'scroll' } },\n                            Object.entries(threadDumpInfo.stackTrace).map(function (_a) {\n                                var stK = _a[0], stV = _a[1];\n                                return (React.createElement(\"samp\", { key: \"detail-\" + stK },\n                                    stV.className,\n                                    \".\",\n                                    stV.methodName,\n                                    React.createElement(\"code\", null,\n                                        \"(\",\n                                        stV.fileName,\n                                        \":\",\n                                        stV.lineNumber,\n                                        \")\")));\n                            }),\n                            React.createElement(\"span\", { className: \"mt-1\" })))))));\n    };\n    return ThreadItem;\n}(React.Component));\nexports.ThreadItem = ThreadItem;\nexports.default = ThreadItem;\n",{"version":3,"file":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/src/main/webapp/app/modules/administration/metrics/thread-item.tsx","sourceRoot":"","sources":["/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/tslint-loader/index.js!/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/src/main/webapp/app/modules/administration/metrics/thread-item.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAC/B,yCAAsD;AAUtD;IAAgC,sCAAmD;IAAnF;QAAA,qEAuCC;QAtCC,WAAK,GAAqB;YACxB,QAAQ,EAAE,KAAK;SAChB,CAAC;QAEF,sBAAgB,GAAG;YACjB,KAAI,CAAC,QAAQ,CAAC;gBACZ,QAAQ,EAAE,CAAC,KAAI,CAAC,KAAK,CAAC,QAAQ;aAC/B,CAAC,CAAC;QACL,CAAC,CAAC;;IA8BJ,CAAC;IA5BC,2BAAM,GAAN;QACU,IAAA,0CAAc,CAAgB;QAEtC,OAAO,CACL;YACE,2BAAG,OAAO,EAAE,IAAI,CAAC,gBAAgB,EAAE,KAAK,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE,IAC3D,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,oDAA4B,CAAC,CAAC,CAAC,oDAA4B,CAChF;YACJ,oBAAC,qBAAQ,IAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ;gBACnC,oBAAC,iBAAI;oBACH,oBAAC,qBAAQ;wBACP,6BAAK,SAAS,EAAC,WAAW,EAAC,KAAK,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE;4BACtD,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,UAAC,EAAyB;oCAAxB,WAAG,EAAE,WAAG;gCAAqB,OAAA,CAC5E,8BAAM,GAAG,EAAE,YAAU,GAAK;oCACvB,GAAG,CAAC,SAAS;;oCAAG,GAAG,CAAC,UAAU;oCAC/B;;wCACI,GAAG,CAAC,QAAQ;;wCAAG,GAAG,CAAC,UAAU;4CAC1B,CACF,CACR;4BAP6E,CAO7E,CAAC;4BACF,8BAAM,SAAS,EAAC,MAAM,GAAG,CACrB,CACG,CACN,CACE,CACP,CACP,CAAC;IACJ,CAAC;IACH,iBAAC;AAAD,CAAC,AAvCD,CAAgC,KAAK,CAAC,SAAS,GAuC9C;AAvCY,gCAAU;AAyCvB,kBAAe,UAAU,CAAC","sourcesContent":["import * as React from 'react';\nimport { Collapse, Card, CardBody } from 'reactstrap';\n\nexport interface IThreadItemProps {\n  threadDumpInfo: any;\n}\n\nexport interface IThreadItemState {\n  collapse: boolean;\n}\n\nexport class ThreadItem extends React.Component<IThreadItemProps, IThreadItemState> {\n  state: IThreadItemState = {\n    collapse: false\n  };\n\n  toggleStackTrace = () => {\n    this.setState({\n      collapse: !this.state.collapse\n    });\n  };\n\n  render() {\n    const { threadDumpInfo } = this.props;\n\n    return (\n      <div>\n        <a onClick={this.toggleStackTrace} style={{ color: 'hotpink' }}>\n          {this.state.collapse ? <span>Hide StackTrace</span> : <span>Show StackTrace</span>}\n        </a>\n        <Collapse isOpen={this.state.collapse}>\n          <Card>\n            <CardBody>\n              <div className=\"row break\" style={{ overflowX: 'scroll' }}>\n                {Object.entries(threadDumpInfo.stackTrace).map(([stK, stV]: [string, any]) => (\n                  <samp key={`detail-${stK}`}>\n                    {stV.className}.{stV.methodName}\n                    <code>\n                      ({stV.fileName}:{stV.lineNumber})\n                    </code>\n                  </samp>\n                ))}\n                <span className=\"mt-1\" />\n              </div>\n            </CardBody>\n          </Card>\n        </Collapse>\n      </div>\n    );\n  }\n}\n\nexport default ThreadItem;\n"]}]}