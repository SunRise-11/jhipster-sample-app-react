{"remainingRequest":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/thread-loader/dist/cjs.js??ref--4-2!/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/ts-loader/index.js??ref--4-3!/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/tslint-loader/index.js!/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/src/main/webapp/app/modules/administration/health/health.tsx","dependencies":[{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/src/main/webapp/app/modules/administration/health/health.tsx","mtime":1522786297329},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/react-hot-loader/webpack.js","mtime":1505850161000},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/thread-loader/dist/cjs.js","mtime":0},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/ts-loader/index.js","mtime":1521265445000},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar React = require(\"react\");\nvar react_redux_1 = require(\"react-redux\");\nvar react_jhipster_1 = require(\"react-jhipster\");\nvar reactstrap_1 = require(\"reactstrap\");\nvar fa_1 = require(\"react-icons/lib/fa\");\nvar administration_reducer_1 = require(\"../administration.reducer\");\nvar health_modal_1 = require(\"./health-modal\");\nvar HealthPage = /** @class */ (function (_super) {\n    tslib_1.__extends(HealthPage, _super);\n    function HealthPage() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {\n            healthObject: {},\n            showModal: false\n        };\n        _this.getSystemHealth = function () {\n            if (!_this.props.isFetching) {\n                _this.props.systemHealth();\n            }\n        };\n        _this.getSystemHealthInfo = function (name, healthObject) { return function () {\n            _this.setState({\n                showModal: true,\n                healthObject: tslib_1.__assign({}, healthObject, { name: name })\n            });\n        }; };\n        _this.handleClose = function () {\n            _this.setState({\n                showModal: false\n            });\n        };\n        _this.renderModal = function () {\n            var healthObject = _this.state.healthObject;\n            return React.createElement(health_modal_1.default, { healthObject: healthObject, handleClose: _this.handleClose, showModal: _this.state.showModal });\n        };\n        return _this;\n    }\n    HealthPage.prototype.componentDidMount = function () {\n        this.props.systemHealth();\n    };\n    HealthPage.prototype.render = function () {\n        var _this = this;\n        var _a = this.props, health = _a.health, isFetching = _a.isFetching;\n        var data = (health || {}).details || {};\n        return (React.createElement(\"div\", null,\n            React.createElement(\"h2\", null, \"Health Checks\"),\n            React.createElement(\"p\", null,\n                React.createElement(\"button\", { type: \"button\", onClick: this.getSystemHealth, className: isFetching ? 'btn btn-danger' : 'btn btn-primary', disabled: isFetching },\n                    React.createElement(fa_1.FaRefresh, null),\n                    \"\\u00A0\",\n                    React.createElement(react_jhipster_1.Translate, { component: \"span\", contentKey: \"health.refresh.button\" }, \"Refresh\"))),\n            React.createElement(\"div\", { className: \"row\" },\n                React.createElement(\"div\", { className: \"col-12\" },\n                    React.createElement(reactstrap_1.Table, { bordered: true },\n                        React.createElement(\"thead\", null,\n                            React.createElement(\"tr\", null,\n                                React.createElement(\"th\", null, \"Service Name\"),\n                                React.createElement(\"th\", null, \"Status\"),\n                                React.createElement(\"th\", null, \"Details\"))),\n                        React.createElement(\"tbody\", null, Object.keys(data).map(function (configPropKey, configPropIndex) {\n                            return configPropKey !== 'status' ? (React.createElement(\"tr\", { key: configPropIndex },\n                                React.createElement(\"td\", null, configPropKey),\n                                React.createElement(\"td\", null,\n                                    React.createElement(reactstrap_1.Badge, { color: data[configPropKey].status !== 'UP' ? 'danger' : 'success' }, data[configPropKey].status)),\n                                React.createElement(\"td\", null, data[configPropKey].details ? (React.createElement(\"a\", { onClick: _this.getSystemHealthInfo(configPropKey, data[configPropKey]) },\n                                    React.createElement(fa_1.FaEye, null))) : null))) : null;\n                        }))))),\n            this.renderModal()));\n    };\n    return HealthPage;\n}(React.Component));\nexports.HealthPage = HealthPage;\nvar mapStateToProps = function (storeState) { return ({\n    health: storeState.administration.health,\n    isFetching: storeState.administration.isFetching\n}); };\nvar mapDispatchToProps = { systemHealth: administration_reducer_1.systemHealth };\nexports.default = react_redux_1.connect(mapStateToProps, mapDispatchToProps)(HealthPage);\n",{"version":3,"file":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/src/main/webapp/app/modules/administration/health/health.tsx","sourceRoot":"","sources":["/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/tslint-loader/index.js!/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/src/main/webapp/app/modules/administration/health/health.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Translate } from 'react-jhipster';\nimport { Table, Badge } from 'reactstrap';\nimport { FaEye, FaRefresh } from 'react-icons/lib/fa';\n\nimport { systemHealth } from '../administration.reducer';\nimport HealthModal from './health-modal';\n\nexport interface IHealthPageProps {\n  isFetching?: boolean;\n  systemHealth: Function;\n  health: any;\n  systemHealthInfo: any;\n}\n\nexport interface IHealthPageState {\n  healthObject: any;\n  showModal: boolean;\n}\n\nexport class HealthPage extends React.Component<IHealthPageProps, IHealthPageState> {\n  state: IHealthPageState = {\n    healthObject: {},\n    showModal: false\n  };\n\n  componentDidMount() {\n    this.props.systemHealth();\n  }\n\n  getSystemHealth = () => {\n    if (!this.props.isFetching) {\n      this.props.systemHealth();\n    }\n  };\n\n  getSystemHealthInfo = (name, healthObject) => () => {\n    this.setState({\n      showModal: true,\n      healthObject: {\n        ...healthObject,\n        name\n      }\n    });\n  };\n\n  handleClose = () => {\n    this.setState({\n      showModal: false\n    });\n  };\n\n  renderModal = () => {\n    const { healthObject } = this.state;\n    return <HealthModal healthObject={healthObject} handleClose={this.handleClose} showModal={this.state.showModal} />;\n  };\n\n  render() {\n    const { health, isFetching } = this.props;\n    const data = (health || {}).details || {};\n    return (\n      <div>\n        <h2>Health Checks</h2>\n        <p>\n          <button\n            type=\"button\"\n            onClick={this.getSystemHealth}\n            className={isFetching ? 'btn btn-danger' : 'btn btn-primary'}\n            disabled={isFetching}\n          >\n            <FaRefresh />&nbsp;\n            <Translate component=\"span\" contentKey=\"health.refresh.button\">\n              Refresh\n            </Translate>\n          </button>\n        </p>\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <Table bordered>\n              <thead>\n                <tr>\n                  <th>Service Name</th>\n                  <th>Status</th>\n                  <th>Details</th>\n                </tr>\n              </thead>\n              <tbody>\n                {Object.keys(data).map(\n                  (configPropKey, configPropIndex) =>\n                    configPropKey !== 'status' ? (\n                      <tr key={configPropIndex}>\n                        <td>{configPropKey}</td>\n                        <td>\n                          <Badge color={data[configPropKey].status !== 'UP' ? 'danger' : 'success'}>{data[configPropKey].status}</Badge>\n                        </td>\n                        <td>\n                          {data[configPropKey].details ? (\n                            <a onClick={this.getSystemHealthInfo(configPropKey, data[configPropKey])}>\n                              <FaEye />\n                            </a>\n                          ) : null}\n                        </td>\n                      </tr>\n                    ) : null\n                )}\n              </tbody>\n            </Table>\n          </div>\n        </div>\n        {this.renderModal()}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = storeState => ({\n  health: storeState.administration.health,\n  isFetching: storeState.administration.isFetching\n});\n\nconst mapDispatchToProps = { systemHealth };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HealthPage);\n"]}]}