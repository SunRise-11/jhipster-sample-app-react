{"remainingRequest":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/thread-loader/dist/cjs.js??ref--4-2!/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/ts-loader/index.js??ref--4-3!/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/tslint-loader/index.js!/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/src/main/webapp/app/modules/account/password/password.tsx","dependencies":[{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/src/main/webapp/app/modules/account/password/password.tsx","mtime":1522786297078},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/react-hot-loader/webpack.js","mtime":1505850161000},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/thread-loader/dist/cjs.js","mtime":0},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/ts-loader/index.js","mtime":1521265445000},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar React = require(\"react\");\nvar react_jhipster_1 = require(\"react-jhipster\");\nvar react_redux_1 = require(\"react-redux\");\nvar availity_reactstrap_validation_1 = require(\"availity-reactstrap-validation\");\nvar reactstrap_1 = require(\"reactstrap\");\nvar authentication_1 = require(\"app/shared/reducers/authentication\");\nvar password_strength_bar_1 = require(\"app/shared/layout/password/password-strength-bar\");\nvar password_reducer_1 = require(\"./password.reducer\");\nvar SettingsPage = /** @class */ (function (_super) {\n    tslib_1.__extends(SettingsPage, _super);\n    function SettingsPage() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {\n            password: ''\n        };\n        _this.handleValidSubmit = function (event, values) {\n            _this.props.savePassword(values.currentPassword, values.newPassword);\n        };\n        _this.updatePassword = function (event) {\n            _this.setState({ password: event.target.value });\n        };\n        return _this;\n    }\n    SettingsPage.prototype.componentDidMount = function () {\n        this.props.reset();\n        this.props.getSession();\n    };\n    SettingsPage.prototype.componentWillUnmount = function () {\n        this.props.reset();\n    };\n    SettingsPage.prototype.render = function () {\n        var account = this.props.account;\n        return (React.createElement(\"div\", null,\n            React.createElement(reactstrap_1.Row, { className: \"justify-content-center\" },\n                React.createElement(reactstrap_1.Col, { md: \"8\" },\n                    React.createElement(\"h2\", null,\n                        React.createElement(react_jhipster_1.Translate, { contentKey: \"password.title\", interpolate: { username: account.login } },\n                            \"Password for \",\n                            account.login)),\n                    React.createElement(availity_reactstrap_validation_1.AvForm, { onValidSubmit: this.handleValidSubmit },\n                        React.createElement(availity_reactstrap_validation_1.AvField, { name: \"currentPassword\", label: react_jhipster_1.translate('global.form.currentpassword'), placeholder: react_jhipster_1.translate('global.form.currentpassword.placeholder'), type: \"password\", validate: {\n                                required: { value: true, errorMessage: react_jhipster_1.translate('global.messages.validate.newpassword.required') }\n                            } }),\n                        React.createElement(availity_reactstrap_validation_1.AvField, { name: \"newPassword\", label: react_jhipster_1.translate('global.form.newpassword'), placeholder: react_jhipster_1.translate('global.form.newpassword.placeholder'), type: \"password\", validate: {\n                                required: { value: true, errorMessage: react_jhipster_1.translate('global.messages.validate.newpassword.required') },\n                                minLength: { value: 4, errorMessage: react_jhipster_1.translate('global.messages.validate.newpassword.minlength') },\n                                maxLength: { value: 50, errorMessage: react_jhipster_1.translate('global.messages.validate.newpassword.maxlength') }\n                            }, onChange: this.updatePassword }),\n                        React.createElement(password_strength_bar_1.default, { password: this.state.password }),\n                        React.createElement(availity_reactstrap_validation_1.AvField, { name: \"confirmPassword\", label: react_jhipster_1.translate('global.form.confirmpassword'), placeholder: react_jhipster_1.translate('global.form.confirmpassword.placeholder'), type: \"password\", validate: {\n                                required: {\n                                    value: true,\n                                    errorMessage: react_jhipster_1.translate('global.messages.validate.confirmpassword.required')\n                                },\n                                minLength: {\n                                    value: 4,\n                                    errorMessage: react_jhipster_1.translate('global.messages.validate.confirmpassword.minlength')\n                                },\n                                maxLength: {\n                                    value: 50,\n                                    errorMessage: react_jhipster_1.translate('global.messages.validate.confirmpassword.maxlength')\n                                },\n                                match: {\n                                    value: 'newPassword',\n                                    errorMessage: react_jhipster_1.translate('global.messages.error.dontmatch')\n                                }\n                            } }),\n                        React.createElement(reactstrap_1.Button, { color: \"success\", type: \"submit\" },\n                            React.createElement(react_jhipster_1.Translate, { contentKey: \"password.form.button\" }, \"Save\")))))));\n    };\n    return SettingsPage;\n}(React.Component));\nexports.SettingsPage = SettingsPage;\nvar mapStateToProps = function (_a) {\n    var authentication = _a.authentication, password = _a.password;\n    return ({\n        account: authentication.account,\n        isAuthenticated: authentication.isAuthenticated\n    });\n};\nvar mapDispatchToProps = { getSession: authentication_1.getSession, savePassword: password_reducer_1.savePassword, reset: password_reducer_1.reset };\nexports.default = react_redux_1.connect(mapStateToProps, mapDispatchToProps)(SettingsPage);\n",{"version":3,"file":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/src/main/webapp/app/modules/account/password/password.tsx","sourceRoot":"","sources":["/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/tslint-loader/index.js!/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/src/main/webapp/app/modules/account/password/password.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Translate, translate } from 'react-jhipster';\nimport { connect } from 'react-redux';\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\nimport { Row, Col, Button } from 'reactstrap';\n\nimport { getSession } from 'app/shared/reducers/authentication';\nimport PasswordStrengthBar from 'app/shared/layout/password/password-strength-bar';\nimport { savePassword, reset } from './password.reducer';\n\nexport interface IUserSettingsProps {\n  account: any;\n  getSession: Function;\n  savePassword: Function;\n  reset: Function;\n}\n\nexport interface IUserSettingsState {\n  password: string;\n}\n\nexport class SettingsPage extends React.Component<IUserSettingsProps, IUserSettingsState> {\n  state: IUserSettingsState = {\n    password: ''\n  };\n\n  componentDidMount() {\n    this.props.reset();\n    this.props.getSession();\n  }\n\n  componentWillUnmount() {\n    this.props.reset();\n  }\n\n  handleValidSubmit = (event, values) => {\n    this.props.savePassword(values.currentPassword, values.newPassword);\n  };\n\n  updatePassword = event => {\n    this.setState({ password: event.target.value });\n  };\n\n  render() {\n    const { account } = this.props;\n\n    return (\n      <div>\n        <Row className=\"justify-content-center\">\n          <Col md=\"8\">\n            <h2>\n              <Translate contentKey=\"password.title\" interpolate={{ username: account.login }}>\n                Password for {account.login}\n              </Translate>\n            </h2>\n            <AvForm onValidSubmit={this.handleValidSubmit}>\n              <AvField\n                name=\"currentPassword\"\n                label={translate('global.form.currentpassword')}\n                placeholder={translate('global.form.currentpassword.placeholder')}\n                type=\"password\"\n                validate={{\n                  required: { value: true, errorMessage: translate('global.messages.validate.newpassword.required') }\n                }}\n              />\n              <AvField\n                name=\"newPassword\"\n                label={translate('global.form.newpassword')}\n                placeholder={translate('global.form.newpassword.placeholder')}\n                type=\"password\"\n                validate={{\n                  required: { value: true, errorMessage: translate('global.messages.validate.newpassword.required') },\n                  minLength: { value: 4, errorMessage: translate('global.messages.validate.newpassword.minlength') },\n                  maxLength: { value: 50, errorMessage: translate('global.messages.validate.newpassword.maxlength') }\n                }}\n                onChange={this.updatePassword}\n              />\n              <PasswordStrengthBar password={this.state.password} />\n              <AvField\n                name=\"confirmPassword\"\n                label={translate('global.form.confirmpassword')}\n                placeholder={translate('global.form.confirmpassword.placeholder')}\n                type=\"password\"\n                validate={{\n                  required: {\n                    value: true,\n                    errorMessage: translate('global.messages.validate.confirmpassword.required')\n                  },\n                  minLength: {\n                    value: 4,\n                    errorMessage: translate('global.messages.validate.confirmpassword.minlength')\n                  },\n                  maxLength: {\n                    value: 50,\n                    errorMessage: translate('global.messages.validate.confirmpassword.maxlength')\n                  },\n                  match: {\n                    value: 'newPassword',\n                    errorMessage: translate('global.messages.error.dontmatch')\n                  }\n                }}\n              />\n              <Button color=\"success\" type=\"submit\">\n                <Translate contentKey=\"password.form.button\">Save</Translate>\n              </Button>\n            </AvForm>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ authentication, password }) => ({\n  account: authentication.account,\n  isAuthenticated: authentication.isAuthenticated\n});\n\nconst mapDispatchToProps = { getSession, savePassword, reset };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingsPage);\n"]}]}