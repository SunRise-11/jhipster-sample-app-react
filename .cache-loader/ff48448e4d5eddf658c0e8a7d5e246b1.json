{"remainingRequest":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/thread-loader/dist/cjs.js??ref--4-2!/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/ts-loader/index.js??ref--4-3!/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/tslint-loader/index.js!/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/src/main/webapp/app/modules/administration/user-management/user-management-update.tsx","dependencies":[{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/src/main/webapp/app/modules/administration/user-management/user-management-update.tsx","mtime":1522786297645},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/react-hot-loader/webpack.js","mtime":1505850161000},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/thread-loader/dist/cjs.js","mtime":0},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/ts-loader/index.js","mtime":1521265445000},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar React = require(\"react\");\nvar react_redux_1 = require(\"react-redux\");\nvar react_router_dom_1 = require(\"react-router-dom\");\nvar reactstrap_1 = require(\"reactstrap\");\nvar availity_reactstrap_validation_1 = require(\"availity-reactstrap-validation\");\nvar react_jhipster_1 = require(\"react-jhipster\");\nvar fa_1 = require(\"react-icons/lib/fa\");\nvar translation_1 = require(\"app/config/translation\");\nvar user_management_reducer_1 = require(\"./user-management.reducer\");\nvar UserManagementUpdate = /** @class */ (function (_super) {\n    tslib_1.__extends(UserManagementUpdate, _super);\n    function UserManagementUpdate() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {\n            isNew: !_this.props.match.params || !_this.props.match.params.login\n        };\n        _this.saveUser = function (event, values) {\n            if (_this.state.isNew) {\n                _this.props.createUser(values);\n            }\n            else {\n                _this.props.updateUser(values);\n            }\n            _this.handleClose();\n        };\n        _this.handleClose = function () {\n            _this.props.history.push('/admin/user-management');\n        };\n        return _this;\n    }\n    UserManagementUpdate.prototype.componentDidMount = function () {\n        !this.state.isNew && this.props.getUser(this.props.match.params.login);\n        this.props.getRoles();\n    };\n    UserManagementUpdate.prototype.componentWillUnmount = function () {\n        this.props.reset();\n    };\n    UserManagementUpdate.prototype.render = function () {\n        var isInvalid = false;\n        var _a = this.props, user = _a.user, loading = _a.loading, updating = _a.updating, roles = _a.roles;\n        var isNew = this.state.isNew;\n        return (React.createElement(\"div\", null,\n            React.createElement(reactstrap_1.Row, { className: \"justify-content-center\" },\n                React.createElement(reactstrap_1.Col, { md: \"8\" },\n                    React.createElement(\"h1\", null,\n                        React.createElement(react_jhipster_1.Translate, { contentKey: \"userManagement.home.createOrEditLabel\" }, \"Create or edit a User\")))),\n            React.createElement(reactstrap_1.Row, { className: \"justify-content-center\" },\n                React.createElement(reactstrap_1.Col, { md: \"8\" }, loading ? (React.createElement(\"p\", null, \"Loading...\")) : (React.createElement(availity_reactstrap_validation_1.AvForm, { model: isNew ? {} : user, onValidSubmit: this.saveUser },\n                    user.id ? (React.createElement(availity_reactstrap_validation_1.AvGroup, null,\n                        React.createElement(reactstrap_1.Label, { for: \"id\" },\n                            React.createElement(react_jhipster_1.Translate, { contentKey: \"global.field.id\" }, \"ID\")),\n                        React.createElement(availity_reactstrap_validation_1.AvField, { type: \"text\", className: \"form-control\", name: \"id\", required: true, readOnly: true }))) : null,\n                    React.createElement(availity_reactstrap_validation_1.AvGroup, null,\n                        React.createElement(reactstrap_1.Label, { for: \"login\" },\n                            React.createElement(react_jhipster_1.Translate, { contentKey: \"userManagement.login\" }, \"Login\")),\n                        React.createElement(availity_reactstrap_validation_1.AvField, { type: \"text\", className: \"form-control\", name: \"login\", validate: {\n                                required: {\n                                    value: true,\n                                    errorMessage: react_jhipster_1.translate('register.messages.validate.login.required')\n                                },\n                                pattern: {\n                                    value: '^[_.@A-Za-z0-9-]*$',\n                                    errorMessage: react_jhipster_1.translate('register.messages.validate.login.pattern')\n                                },\n                                minLength: {\n                                    value: 1,\n                                    errorMessage: react_jhipster_1.translate('register.messages.validate.login.minlength')\n                                },\n                                maxLength: {\n                                    value: 50,\n                                    errorMessage: react_jhipster_1.translate('register.messages.validate.login.maxlength')\n                                }\n                            } })),\n                    React.createElement(availity_reactstrap_validation_1.AvGroup, null,\n                        React.createElement(reactstrap_1.Label, { for: \"firstName\" },\n                            React.createElement(react_jhipster_1.Translate, { contentKey: \"userManagement.firstName\" }, \"First Name\")),\n                        React.createElement(availity_reactstrap_validation_1.AvField, { type: \"text\", className: \"form-control\", name: \"firstName\", validate: {\n                                maxLength: {\n                                    value: 50,\n                                    errorMessage: react_jhipster_1.translate('entity.validation.maxlength', { max: 50 })\n                                }\n                            } })),\n                    React.createElement(availity_reactstrap_validation_1.AvGroup, null,\n                        React.createElement(reactstrap_1.Label, { for: \"lastName\" },\n                            React.createElement(react_jhipster_1.Translate, { contentKey: \"userManagement.lastName\" }, \"Last Name\")),\n                        React.createElement(availity_reactstrap_validation_1.AvField, { type: \"text\", className: \"form-control\", name: \"lastName\", validate: {\n                                maxLength: {\n                                    value: 50,\n                                    errorMessage: react_jhipster_1.translate('entity.validation.maxlength', { max: 50 })\n                                }\n                            } }),\n                        React.createElement(availity_reactstrap_validation_1.AvFeedback, null, \"This field cannot be longer than 50 characters.\")),\n                    React.createElement(availity_reactstrap_validation_1.AvGroup, null,\n                        React.createElement(availity_reactstrap_validation_1.AvField, { name: \"email\", label: react_jhipster_1.translate('global.form.email'), placeholder: react_jhipster_1.translate('global.form.email.placeholder'), type: \"email\", validate: {\n                                required: {\n                                    value: true,\n                                    errorMessage: react_jhipster_1.translate('global.messages.validate.email.required')\n                                },\n                                email: {\n                                    errorMessage: react_jhipster_1.translate('global.messages.validate.email.invalid')\n                                },\n                                minLength: {\n                                    value: 5,\n                                    errorMessage: react_jhipster_1.translate('global.messages.validate.email.minlength')\n                                },\n                                maxLength: {\n                                    value: 254,\n                                    errorMessage: react_jhipster_1.translate('global.messages.validate.email.maxlength')\n                                }\n                            } })),\n                    React.createElement(availity_reactstrap_validation_1.AvGroup, { check: true },\n                        React.createElement(reactstrap_1.Label, null,\n                            React.createElement(availity_reactstrap_validation_1.AvInput, { type: \"checkbox\", name: \"activated\" }),\n                            \" \",\n                            React.createElement(react_jhipster_1.Translate, { contentKey: \"userManagement.activated\" }, \"Activated\"))),\n                    React.createElement(availity_reactstrap_validation_1.AvGroup, null,\n                        React.createElement(reactstrap_1.Label, { for: \"langKey\" },\n                            React.createElement(react_jhipster_1.Translate, { contentKey: \"userManagement.langKey\" }, \"Language Key\")),\n                        React.createElement(availity_reactstrap_validation_1.AvField, { type: \"select\", className: \"form-control\", name: \"langKey\", defaultValue: translation_1.locales[0] }, translation_1.locales.map(function (lang) { return (React.createElement(\"option\", { value: lang, key: lang }, lang)); }))),\n                    React.createElement(availity_reactstrap_validation_1.AvGroup, null,\n                        React.createElement(reactstrap_1.Label, { for: \"authorities\" },\n                            React.createElement(react_jhipster_1.Translate, { contentKey: \"userManagement.profiles\" }, \"Language Key\")),\n                        React.createElement(availity_reactstrap_validation_1.AvInput, { type: \"select\", className: \"form-control\", name: \"authorities\", value: user.authorities, multiple: true }, roles.map(function (role) { return (React.createElement(\"option\", { value: role, key: role }, role)); }))),\n                    React.createElement(reactstrap_1.Button, { tag: react_router_dom_1.Link, to: \"/admin/user-management\", replace: true, color: \"info\" },\n                        React.createElement(fa_1.FaArrowLeft, null),\n                        \"\\u00A0\",\n                        React.createElement(\"span\", { className: \"d-none d-md-inline\" },\n                            React.createElement(react_jhipster_1.Translate, { contentKey: \"entity.action.back\" }, \"Back\"))),\n                    \"\\u00A0\",\n                    React.createElement(reactstrap_1.Button, { color: \"primary\", type: \"submit\", disabled: isInvalid || updating },\n                        React.createElement(fa_1.FaFloppyO, null),\n                        \"\\u00A0\",\n                        React.createElement(react_jhipster_1.Translate, { contentKey: \"entity.action.save\" }, \"Save\"))))))));\n    };\n    return UserManagementUpdate;\n}(React.Component));\nexports.UserManagementUpdate = UserManagementUpdate;\nvar mapStateToProps = function (storeState) { return ({\n    user: storeState.userManagement.user,\n    roles: storeState.userManagement.authorities,\n    loading: storeState.userManagement.loading,\n    updating: storeState.userManagement.updating\n}); };\nvar mapDispatchToProps = { getUser: user_management_reducer_1.getUser, getRoles: user_management_reducer_1.getRoles, updateUser: user_management_reducer_1.updateUser, createUser: user_management_reducer_1.createUser, reset: user_management_reducer_1.reset };\nexports.default = react_redux_1.connect(mapStateToProps, mapDispatchToProps)(UserManagementUpdate);\n",{"version":3,"file":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/src/main/webapp/app/modules/administration/user-management/user-management-update.tsx","sourceRoot":"","sources":["/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/tslint-loader/index.js!/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/src/main/webapp/app/modules/administration/user-management/user-management-update.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Button, Label, Row, Col } from 'reactstrap';\nimport { AvForm, AvGroup, AvInput, AvField, AvFeedback } from 'availity-reactstrap-validation';\nimport { Translate, translate, ICrudGetAction, ICrudGetAllAction, ICrudPutAction } from 'react-jhipster';\nimport { FaBan, FaFloppyO, FaArrowLeft } from 'react-icons/lib/fa';\n\nimport { locales } from 'app/config/translation';\nimport { IUser } from 'app/shared/model/user.model';\nimport { getUser, getRoles, updateUser, createUser, reset } from './user-management.reducer';\n\nexport interface IUserManagementUpdateProps {\n  getUser: ICrudGetAction<IUser>;\n  getRoles: ICrudGetAllAction<any>;\n  updateUser: ICrudPutAction<IUser>;\n  createUser: ICrudPutAction<IUser>;\n  reset: Function;\n  loading: boolean;\n  updating: boolean;\n  user: IUser;\n  roles: any[];\n  match: any;\n  history: any;\n}\n\nexport interface IUserManagementUpdateState {\n  isNew: boolean;\n}\n\nexport class UserManagementUpdate extends React.Component<IUserManagementUpdateProps, IUserManagementUpdateState> {\n  state: IUserManagementUpdateState = {\n    isNew: !this.props.match.params || !this.props.match.params.login\n  };\n\n  componentDidMount() {\n    !this.state.isNew && this.props.getUser(this.props.match.params.login);\n    this.props.getRoles();\n  }\n\n  componentWillUnmount() {\n    this.props.reset();\n  }\n\n  saveUser = (event, values) => {\n    if (this.state.isNew) {\n      this.props.createUser(values);\n    } else {\n      this.props.updateUser(values);\n    }\n    this.handleClose();\n  };\n\n  handleClose = () => {\n    this.props.history.push('/admin/user-management');\n  };\n\n  render() {\n    const isInvalid = false;\n    const { user, loading, updating, roles } = this.props;\n    const { isNew } = this.state;\n    return (\n      <div>\n        <Row className=\"justify-content-center\">\n          <Col md=\"8\">\n            <h1>\n              <Translate contentKey=\"userManagement.home.createOrEditLabel\">Create or edit a User</Translate>\n            </h1>\n          </Col>\n        </Row>\n        <Row className=\"justify-content-center\">\n          <Col md=\"8\">\n            {loading ? (\n              <p>Loading...</p>\n            ) : (\n              <AvForm model={isNew ? {} : user} onValidSubmit={this.saveUser}>\n                {user.id ? (\n                  <AvGroup>\n                    <Label for=\"id\">\n                      <Translate contentKey=\"global.field.id\">ID</Translate>\n                    </Label>\n                    <AvField type=\"text\" className=\"form-control\" name=\"id\" required readOnly />\n                  </AvGroup>\n                ) : null}\n                <AvGroup>\n                  <Label for=\"login\">\n                    <Translate contentKey=\"userManagement.login\">Login</Translate>\n                  </Label>\n                  <AvField\n                    type=\"text\"\n                    className=\"form-control\"\n                    name=\"login\"\n                    validate={{\n                      required: {\n                        value: true,\n                        errorMessage: translate('register.messages.validate.login.required')\n                      },\n                      pattern: {\n                        value: '^[_.@A-Za-z0-9-]*$',\n                        errorMessage: translate('register.messages.validate.login.pattern')\n                      },\n                      minLength: {\n                        value: 1,\n                        errorMessage: translate('register.messages.validate.login.minlength')\n                      },\n                      maxLength: {\n                        value: 50,\n                        errorMessage: translate('register.messages.validate.login.maxlength')\n                      }\n                    }}\n                  />\n                </AvGroup>\n                <AvGroup>\n                  <Label for=\"firstName\">\n                    <Translate contentKey=\"userManagement.firstName\">First Name</Translate>\n                  </Label>\n                  <AvField\n                    type=\"text\"\n                    className=\"form-control\"\n                    name=\"firstName\"\n                    validate={{\n                      maxLength: {\n                        value: 50,\n                        errorMessage: translate('entity.validation.maxlength', { max: 50 })\n                      }\n                    }}\n                  />\n                </AvGroup>\n                <AvGroup>\n                  <Label for=\"lastName\">\n                    <Translate contentKey=\"userManagement.lastName\">Last Name</Translate>\n                  </Label>\n                  <AvField\n                    type=\"text\"\n                    className=\"form-control\"\n                    name=\"lastName\"\n                    validate={{\n                      maxLength: {\n                        value: 50,\n                        errorMessage: translate('entity.validation.maxlength', { max: 50 })\n                      }\n                    }}\n                  />\n                  <AvFeedback>This field cannot be longer than 50 characters.</AvFeedback>\n                </AvGroup>\n                <AvGroup>\n                  <AvField\n                    name=\"email\"\n                    label={translate('global.form.email')}\n                    placeholder={translate('global.form.email.placeholder')}\n                    type=\"email\"\n                    validate={{\n                      required: {\n                        value: true,\n                        errorMessage: translate('global.messages.validate.email.required')\n                      },\n                      email: {\n                        errorMessage: translate('global.messages.validate.email.invalid')\n                      },\n                      minLength: {\n                        value: 5,\n                        errorMessage: translate('global.messages.validate.email.minlength')\n                      },\n                      maxLength: {\n                        value: 254,\n                        errorMessage: translate('global.messages.validate.email.maxlength')\n                      }\n                    }}\n                  />\n                </AvGroup>\n                <AvGroup check>\n                  <Label>\n                    <AvInput type=\"checkbox\" name=\"activated\" /> <Translate contentKey=\"userManagement.activated\">Activated</Translate>\n                  </Label>\n                </AvGroup>\n                <AvGroup>\n                  <Label for=\"langKey\">\n                    <Translate contentKey=\"userManagement.langKey\">Language Key</Translate>\n                  </Label>\n                  <AvField type=\"select\" className=\"form-control\" name=\"langKey\" defaultValue={locales[0]}>\n                    {locales.map(lang => (\n                      <option value={lang} key={lang}>\n                        {lang}\n                      </option>\n                    ))}\n                  </AvField>\n                </AvGroup>\n                <AvGroup>\n                  <Label for=\"authorities\">\n                    <Translate contentKey=\"userManagement.profiles\">Language Key</Translate>\n                  </Label>\n                  <AvInput type=\"select\" className=\"form-control\" name=\"authorities\" value={user.authorities} multiple>\n                    {roles.map(role => (\n                      <option value={role} key={role}>\n                        {role}\n                      </option>\n                    ))}\n                  </AvInput>\n                </AvGroup>\n                <Button tag={Link} to=\"/admin/user-management\" replace color=\"info\">\n                  <FaArrowLeft />&nbsp;\n                  <span className=\"d-none d-md-inline\">\n                    <Translate contentKey=\"entity.action.back\">Back</Translate>\n                  </span>\n                </Button>\n                &nbsp;\n                <Button color=\"primary\" type=\"submit\" disabled={isInvalid || updating}>\n                  <FaFloppyO />&nbsp;\n                  <Translate contentKey=\"entity.action.save\">Save</Translate>\n                </Button>\n              </AvForm>\n            )}\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = storeState => ({\n  user: storeState.userManagement.user,\n  roles: storeState.userManagement.authorities,\n  loading: storeState.userManagement.loading,\n  updating: storeState.userManagement.updating\n});\n\nconst mapDispatchToProps = { getUser, getRoles, updateUser, createUser, reset };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserManagementUpdate);\n"]}]}