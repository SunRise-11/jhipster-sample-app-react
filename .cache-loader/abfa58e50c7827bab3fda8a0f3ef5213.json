{"remainingRequest":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/thread-loader/dist/cjs.js??ref--4-2!/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/ts-loader/index.js??ref--4-3!/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/tslint-loader/index.js!/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/src/main/webapp/app/modules/account/register/register.tsx","dependencies":[{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/src/main/webapp/app/modules/account/register/register.tsx","mtime":1522786297112},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/react-hot-loader/webpack.js","mtime":1505850161000},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/thread-loader/dist/cjs.js","mtime":0},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/ts-loader/index.js","mtime":1521265445000},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar React = require(\"react\");\nvar react_jhipster_1 = require(\"react-jhipster\");\nvar react_redux_1 = require(\"react-redux\");\nvar availity_reactstrap_validation_1 = require(\"availity-reactstrap-validation\");\nvar reactstrap_1 = require(\"reactstrap\");\nvar password_strength_bar_1 = require(\"app/shared/layout/password/password-strength-bar\");\nvar register_reducer_1 = require(\"./register.reducer\");\nexports.mainErrorMessages = {\n    failed: (React.createElement(react_jhipster_1.Translate, { contentKey: \"register.messages.error.fail\" },\n        React.createElement(\"span\", null,\n            React.createElement(\"strong\", null, \"Registration failed!\"),\n            \" Please try again later.\"))),\n    userexists: (React.createElement(react_jhipster_1.Translate, { contentKey: \"register.messages.error.userexists\" },\n        React.createElement(\"span\", null,\n            React.createElement(\"strong\", null, \"Login name already registered!\"),\n            \" Please choose another one.\"))),\n    emailexists: (React.createElement(react_jhipster_1.Translate, { contentKey: \"register.messages.error.emailexists\" },\n        React.createElement(\"span\", null,\n            React.createElement(\"strong\", null, \"Email is already in use!\"),\n            \" Please choose another one.\")))\n};\nvar RegisterPage = /** @class */ (function (_super) {\n    tslib_1.__extends(RegisterPage, _super);\n    function RegisterPage() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {\n            password: ''\n        };\n        _this.handleValidSubmit = function (event, values) {\n            _this.props.handleRegister(values.username, values.email, values.firstPassword, _this.props.currentLocale);\n            event.preventDefault();\n        };\n        _this.updatePassword = function (event) {\n            _this.setState({ password: event.target.value });\n        };\n        return _this;\n    }\n    RegisterPage.prototype.componentWillUnmount = function () {\n        this.props.reset();\n    };\n    RegisterPage.prototype.render = function () {\n        var _a = this.props, registrationSuccess = _a.registrationSuccess, registrationFailure = _a.registrationFailure, errorMessage = _a.errorMessage;\n        var alertMessage = null;\n        if (registrationFailure) {\n            alertMessage = (React.createElement(reactstrap_1.Alert, { color: \"danger\" }, exports.mainErrorMessages[errorMessage] ? exports.mainErrorMessages[errorMessage] : exports.mainErrorMessages.failed));\n        }\n        else {\n            if (registrationSuccess) {\n                alertMessage = (React.createElement(reactstrap_1.Alert, { color: \"success\" },\n                    React.createElement(react_jhipster_1.Translate, { contentKey: \"register.messages.success\" },\n                        React.createElement(\"span\", null,\n                            React.createElement(\"strong\", null, \"Registration saved!\"),\n                            \" Please check your email for confirmation.\"))));\n            }\n            else {\n                alertMessage = null;\n            }\n        }\n        return (React.createElement(\"div\", null,\n            React.createElement(reactstrap_1.Row, { className: \"justify-content-center\" },\n                React.createElement(reactstrap_1.Col, { md: \"8\" },\n                    React.createElement(\"h1\", null,\n                        React.createElement(react_jhipster_1.Translate, { contentKey: \"register.title\" }, \"Registration\")),\n                    alertMessage)),\n            React.createElement(reactstrap_1.Row, { className: \"justify-content-center\" },\n                React.createElement(reactstrap_1.Col, { md: \"8\" },\n                    React.createElement(availity_reactstrap_validation_1.AvForm, { id: \"register-form\", onValidSubmit: this.handleValidSubmit },\n                        React.createElement(availity_reactstrap_validation_1.AvField, { name: \"username\", label: react_jhipster_1.translate('global.form.username'), placeholder: react_jhipster_1.translate('global.form.username.placeholder'), validate: {\n                                required: { value: true, errorMessage: react_jhipster_1.translate('register.messages.validate.login.required') },\n                                pattern: { value: '^[_.@A-Za-z0-9-]*$', errorMessage: react_jhipster_1.translate('register.messages.validate.login.pattern') },\n                                minLength: { value: 1, errorMessage: react_jhipster_1.translate('register.messages.validate.login.minlength') },\n                                maxLength: { value: 50, errorMessage: react_jhipster_1.translate('register.messages.validate.login.maxlength') }\n                            } }),\n                        React.createElement(availity_reactstrap_validation_1.AvField, { name: \"email\", label: react_jhipster_1.translate('global.form.email'), placeholder: react_jhipster_1.translate('global.form.email.placeholder'), type: \"email\", validate: {\n                                required: { value: true, errorMessage: react_jhipster_1.translate('global.messages.validate.email.required') },\n                                minLength: { value: 5, errorMessage: react_jhipster_1.translate('global.messages.validate.email.minlength') },\n                                maxLength: { value: 254, errorMessage: react_jhipster_1.translate('global.messages.validate.email.maxlength') }\n                            } }),\n                        React.createElement(availity_reactstrap_validation_1.AvField, { name: \"firstPassword\", label: react_jhipster_1.translate('global.form.newpassword'), placeholder: react_jhipster_1.translate('global.form.newpassword.placeholder'), type: \"password\", onChange: this.updatePassword, validate: {\n                                required: { value: true, errorMessage: react_jhipster_1.translate('global.messages.validate.newpassword.required') },\n                                minLength: { value: 4, errorMessage: react_jhipster_1.translate('global.messages.validate.newpassword.minlength') },\n                                maxLength: { value: 50, errorMessage: react_jhipster_1.translate('global.messages.validate.newpassword.maxlength') }\n                            } }),\n                        React.createElement(password_strength_bar_1.default, { password: this.state.password }),\n                        React.createElement(availity_reactstrap_validation_1.AvField, { name: \"secondPassword\", label: react_jhipster_1.translate('global.form.confirmpassword'), placeholder: react_jhipster_1.translate('global.form.confirmpassword.placeholder'), type: \"password\", validate: {\n                                required: { value: true, errorMessage: react_jhipster_1.translate('global.messages.validate.confirmpassword.required') },\n                                minLength: { value: 4, errorMessage: react_jhipster_1.translate('global.messages.validate.confirmpassword.minlength') },\n                                maxLength: { value: 50, errorMessage: react_jhipster_1.translate('global.messages.validate.confirmpassword.maxlength') },\n                                match: { value: 'firstPassword', errorMessage: react_jhipster_1.translate('global.messages.error.dontmatch') }\n                            } }),\n                        React.createElement(reactstrap_1.Button, { id: \"register-submit\", color: \"primary\", type: \"submit\" },\n                            React.createElement(react_jhipster_1.Translate, { contentKey: \"register.form.button\" }, \"Register\"))),\n                    React.createElement(\"p\", null, \"\\u00A0\"),\n                    React.createElement(reactstrap_1.Alert, { color: \"warning\" },\n                        React.createElement(\"span\", null,\n                            React.createElement(react_jhipster_1.Translate, { contentKey: \"global.messages.info.authenticated.prefix\" }, \"If you want to \")),\n                        React.createElement(\"a\", { className: \"alert-link\" },\n                            React.createElement(react_jhipster_1.Translate, { contentKey: \"global.messages.info.authenticated.link\" }, \"sign in \")),\n                        React.createElement(\"span\", null,\n                            React.createElement(react_jhipster_1.Translate, { contentKey: \"global.messages.info.authenticated.suffix\" },\n                                \", you can try the default accounts:\",\n                                React.createElement(\"br\", null),\n                                \"- Administrator (login=\\\"admin\\\" and password=\\\"admin\\\")\",\n                                React.createElement(\"br\", null),\n                                \"- User (login=\\\"user\\\" and password=\\\"user\\\").\")))))));\n    };\n    return RegisterPage;\n}(React.Component));\nexports.RegisterPage = RegisterPage;\nvar mapStateToProps = function (_a) {\n    var register = _a.register, locale = _a.locale;\n    return ({\n        registrationSuccess: register.registrationSuccess,\n        registrationFailure: register.registrationFailure,\n        errorMessage: register.errorMessage,\n        currentLocale: locale.currentLocale\n    });\n};\nvar mapDispatchToProps = { handleRegister: register_reducer_1.handleRegister, reset: register_reducer_1.reset };\nexports.default = react_redux_1.connect(mapStateToProps, mapDispatchToProps)(RegisterPage);\n",{"version":3,"file":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/src/main/webapp/app/modules/account/register/register.tsx","sourceRoot":"","sources":["/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/tslint-loader/index.js!/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/src/main/webapp/app/modules/account/register/register.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Translate, translate } from 'react-jhipster';\nimport { connect } from 'react-redux';\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\nimport { Row, Col, Alert, Button } from 'reactstrap';\n\nimport PasswordStrengthBar from 'app/shared/layout/password/password-strength-bar';\nimport { handleRegister, reset } from './register.reducer';\n\nexport const mainErrorMessages = {\n  failed: (\n    <Translate contentKey=\"register.messages.error.fail\">\n      <span>\n        <strong>Registration failed!</strong> Please try again later.\n      </span>\n    </Translate>\n  ),\n  userexists: (\n    <Translate contentKey=\"register.messages.error.userexists\">\n      <span>\n        <strong>Login name already registered!</strong> Please choose another one.\n      </span>\n    </Translate>\n  ),\n  emailexists: (\n    <Translate contentKey=\"register.messages.error.emailexists\">\n      <span>\n        <strong>Email is already in use!</strong> Please choose another one.\n      </span>\n    </Translate>\n  )\n};\n\nexport interface IRegisterProps {\n  handleRegister: Function;\n  reset: Function;\n  registrationSuccess: boolean;\n  registrationFailure: boolean;\n  errorMessage: string;\n  currentLocale: string;\n}\n\nexport interface IRegisterState {\n  password: string;\n}\n\nexport class RegisterPage extends React.Component<IRegisterProps, IRegisterState> {\n  state: IRegisterState = {\n    password: ''\n  };\n\n  componentWillUnmount() {\n    this.props.reset();\n  }\n\n  handleValidSubmit = (event, values) => {\n    this.props.handleRegister(values.username, values.email, values.firstPassword, this.props.currentLocale);\n    event.preventDefault();\n  };\n\n  updatePassword = event => {\n    this.setState({ password: event.target.value });\n  };\n\n  render() {\n    const { registrationSuccess, registrationFailure, errorMessage } = this.props;\n    let alertMessage = null;\n\n    if (registrationFailure) {\n      alertMessage = (\n        <Alert color=\"danger\">{mainErrorMessages[errorMessage] ? mainErrorMessages[errorMessage] : mainErrorMessages.failed}</Alert>\n      );\n    } else {\n      if (registrationSuccess) {\n        alertMessage = (\n          <Alert color=\"success\">\n            <Translate contentKey=\"register.messages.success\">\n              <span>\n                <strong>Registration saved!</strong> Please check your email for confirmation.\n              </span>\n            </Translate>\n          </Alert>\n        );\n      } else {\n        alertMessage = null;\n      }\n    }\n\n    return (\n      <div>\n        <Row className=\"justify-content-center\">\n          <Col md=\"8\">\n            <h1>\n              <Translate contentKey=\"register.title\">Registration</Translate>\n            </h1>\n            {alertMessage}\n          </Col>\n        </Row>\n        <Row className=\"justify-content-center\">\n          <Col md=\"8\">\n            <AvForm id=\"register-form\" onValidSubmit={this.handleValidSubmit}>\n              <AvField\n                name=\"username\"\n                label={translate('global.form.username')}\n                placeholder={translate('global.form.username.placeholder')}\n                validate={{\n                  required: { value: true, errorMessage: translate('register.messages.validate.login.required') },\n                  pattern: { value: '^[_.@A-Za-z0-9-]*$', errorMessage: translate('register.messages.validate.login.pattern') },\n                  minLength: { value: 1, errorMessage: translate('register.messages.validate.login.minlength') },\n                  maxLength: { value: 50, errorMessage: translate('register.messages.validate.login.maxlength') }\n                }}\n              />\n              <AvField\n                name=\"email\"\n                label={translate('global.form.email')}\n                placeholder={translate('global.form.email.placeholder')}\n                type=\"email\"\n                validate={{\n                  required: { value: true, errorMessage: translate('global.messages.validate.email.required') },\n                  minLength: { value: 5, errorMessage: translate('global.messages.validate.email.minlength') },\n                  maxLength: { value: 254, errorMessage: translate('global.messages.validate.email.maxlength') }\n                }}\n              />\n              <AvField\n                name=\"firstPassword\"\n                label={translate('global.form.newpassword')}\n                placeholder={translate('global.form.newpassword.placeholder')}\n                type=\"password\"\n                onChange={this.updatePassword}\n                validate={{\n                  required: { value: true, errorMessage: translate('global.messages.validate.newpassword.required') },\n                  minLength: { value: 4, errorMessage: translate('global.messages.validate.newpassword.minlength') },\n                  maxLength: { value: 50, errorMessage: translate('global.messages.validate.newpassword.maxlength') }\n                }}\n              />\n              <PasswordStrengthBar password={this.state.password} />\n              <AvField\n                name=\"secondPassword\"\n                label={translate('global.form.confirmpassword')}\n                placeholder={translate('global.form.confirmpassword.placeholder')}\n                type=\"password\"\n                validate={{\n                  required: { value: true, errorMessage: translate('global.messages.validate.confirmpassword.required') },\n                  minLength: { value: 4, errorMessage: translate('global.messages.validate.confirmpassword.minlength') },\n                  maxLength: { value: 50, errorMessage: translate('global.messages.validate.confirmpassword.maxlength') },\n                  match: { value: 'firstPassword', errorMessage: translate('global.messages.error.dontmatch') }\n                }}\n              />\n              <Button id=\"register-submit\" color=\"primary\" type=\"submit\">\n                <Translate contentKey=\"register.form.button\">Register</Translate>\n              </Button>\n            </AvForm>\n            <p>&nbsp;</p>\n            <Alert color=\"warning\">\n              <span>\n                <Translate contentKey=\"global.messages.info.authenticated.prefix\">If you want to </Translate>\n              </span>\n              <a className=\"alert-link\">\n                <Translate contentKey=\"global.messages.info.authenticated.link\">sign in </Translate>\n              </a>\n              <span>\n                <Translate contentKey=\"global.messages.info.authenticated.suffix\">\n                  , you can try the default accounts:\n                  <br />- Administrator (login=\"admin\" and password=\"admin\")\n                  <br />- User (login=\"user\" and password=\"user\").\n                </Translate>\n              </span>\n            </Alert>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ register, locale }) => ({\n  registrationSuccess: register.registrationSuccess,\n  registrationFailure: register.registrationFailure,\n  errorMessage: register.errorMessage,\n  currentLocale: locale.currentLocale\n});\n\nconst mapDispatchToProps = { handleRegister, reset };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RegisterPage);\n"]}]}