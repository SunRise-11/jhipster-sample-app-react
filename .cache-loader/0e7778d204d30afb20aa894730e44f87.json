{"remainingRequest":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/thread-loader/dist/cjs.js??ref--4-2!/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/ts-loader/index.js??ref--4-3!/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/tslint-loader/index.js!/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/src/main/webapp/app/modules/account/password-reset/password-reset.reducer.ts","dependencies":[{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/src/main/webapp/app/modules/account/password-reset/password-reset.reducer.ts","mtime":1522786297207},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/react-hot-loader/webpack.js","mtime":1505850161000},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/thread-loader/dist/cjs.js","mtime":0},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/ts-loader/index.js","mtime":1521265445000},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar axios_1 = require(\"axios\");\nvar action_type_util_1 = require(\"app/shared/reducers/action-type.util\");\nexports.ACTION_TYPES = {\n    RESET_PASSWORD_INIT: 'passwordReset/RESET_PASSWORD_INIT',\n    RESET_PASSWORD_FINISH: 'passwordReset/RESET_PASSWORD_FINISH',\n    RESET: 'passwordReset/RESET'\n};\nvar initialState = {\n    loading: false,\n    resetPasswordSuccess: false,\n    resetPasswordFailure: false\n};\n// Reducer\nexports.default = (function (state, action) {\n    if (state === void 0) { state = initialState; }\n    switch (action.type) {\n        case action_type_util_1.REQUEST(exports.ACTION_TYPES.RESET_PASSWORD_FINISH):\n        case action_type_util_1.REQUEST(exports.ACTION_TYPES.RESET_PASSWORD_INIT):\n            return tslib_1.__assign({}, state, { loading: true });\n        case action_type_util_1.FAILURE(exports.ACTION_TYPES.RESET_PASSWORD_FINISH):\n        case action_type_util_1.FAILURE(exports.ACTION_TYPES.RESET_PASSWORD_INIT):\n            return tslib_1.__assign({}, initialState, { loading: false, resetPasswordFailure: true });\n        case action_type_util_1.SUCCESS(exports.ACTION_TYPES.RESET_PASSWORD_FINISH):\n        case action_type_util_1.SUCCESS(exports.ACTION_TYPES.RESET_PASSWORD_INIT):\n            return tslib_1.__assign({}, initialState, { loading: false, resetPasswordSuccess: true });\n        case exports.ACTION_TYPES.RESET:\n            return tslib_1.__assign({}, initialState);\n        default:\n            return state;\n    }\n});\nvar apiUrl = '/api/account/reset-password';\n// Actions\nexports.handlePasswordResetInit = function (mail) {\n    return ({\n        type: exports.ACTION_TYPES.RESET_PASSWORD_INIT,\n        // If the content-type isn't set that way, axios will try to encode the body and thus modify the data sent to the server.\n        payload: axios_1.default.post(apiUrl + \"/init\", mail, { headers: (_a = {}, _a['Content-Type'] = 'text/plain', _a) })\n    });\n    var _a;\n};\nexports.handlePasswordResetFinish = function (key, newPassword) { return ({\n    type: exports.ACTION_TYPES.RESET_PASSWORD_FINISH,\n    payload: axios_1.default.post(apiUrl + \"/finish\", { key: key, newPassword: newPassword })\n}); };\nexports.reset = function () { return ({\n    type: exports.ACTION_TYPES.RESET\n}); };\n",{"version":3,"file":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/src/main/webapp/app/modules/account/password-reset/password-reset.reducer.ts","sourceRoot":"","sources":["/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/tslint-loader/index.js!/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/src/main/webapp/app/modules/account/password-reset/password-reset.reducer.ts"],"names":[],"mappings":";;;AAAA,+BAA0B;AAE1B,yEAAiF;AAEpE,QAAA,YAAY,GAAG;IAC1B,mBAAmB,EAAE,mCAAmC;IACxD,qBAAqB,EAAE,qCAAqC;IAC5D,KAAK,EAAE,qBAAqB;CAC7B,CAAC;AAEF,IAAM,YAAY,GAAG;IACnB,OAAO,EAAE,KAAK;IACd,oBAAoB,EAAE,KAAK;IAC3B,oBAAoB,EAAE,KAAK;CAC5B,CAAC;AAEF,UAAU;AACV,mBAAe,UAAC,KAAoB,EAAE,MAAM;IAA5B,sBAAA,EAAA,oBAAoB;IAClC,QAAQ,MAAM,CAAC,IAAI,EAAE;QACnB,KAAK,0BAAO,CAAC,oBAAY,CAAC,qBAAqB,CAAC,CAAC;QACjD,KAAK,0BAAO,CAAC,oBAAY,CAAC,mBAAmB,CAAC;YAC5C,4BACK,KAAK,IACR,OAAO,EAAE,IAAI,IACb;QACJ,KAAK,0BAAO,CAAC,oBAAY,CAAC,qBAAqB,CAAC,CAAC;QACjD,KAAK,0BAAO,CAAC,oBAAY,CAAC,mBAAmB,CAAC;YAC5C,4BACK,YAAY,IACf,OAAO,EAAE,KAAK,EACd,oBAAoB,EAAE,IAAI,IAC1B;QACJ,KAAK,0BAAO,CAAC,oBAAY,CAAC,qBAAqB,CAAC,CAAC;QACjD,KAAK,0BAAO,CAAC,oBAAY,CAAC,mBAAmB,CAAC;YAC5C,4BACK,YAAY,IACf,OAAO,EAAE,KAAK,EACd,oBAAoB,EAAE,IAAI,IAC1B;QACJ,KAAK,oBAAY,CAAC,KAAK;YACrB,4BACK,YAAY,EACf;QACJ;YACE,OAAO,KAAK,CAAC;KAChB;AACH,CAAC,EAAC;AAEF,IAAM,MAAM,GAAG,6BAA6B,CAAC;AAE7C,UAAU;AACG,QAAA,uBAAuB,GAAG,UAAA,IAAI;IAAI,OAAA,CAAC;QAC9C,IAAI,EAAE,oBAAY,CAAC,mBAAmB;QACtC,yHAAyH;QACzH,OAAO,EAAE,eAAK,CAAC,IAAI,CAAI,MAAM,UAAO,EAAE,IAAI,EAAE,EAAE,OAAO,YAAI,GAAC,cAAc,IAAG,YAAY,KAAE,EAAE,CAAC;KAC7F,CAAC;;AAJ6C,CAI7C,CAAC;AAEU,QAAA,yBAAyB,GAAG,UAAC,GAAG,EAAE,WAAW,IAAK,OAAA,CAAC;IAC9D,IAAI,EAAE,oBAAY,CAAC,qBAAqB;IACxC,OAAO,EAAE,eAAK,CAAC,IAAI,CAAI,MAAM,YAAS,EAAE,EAAE,GAAG,KAAA,EAAE,WAAW,aAAA,EAAE,CAAC;CAC9D,CAAC,EAH6D,CAG7D,CAAC;AAEU,QAAA,KAAK,GAAG,cAAM,OAAA,CAAC;IAC1B,IAAI,EAAE,oBAAY,CAAC,KAAK;CACzB,CAAC,EAFyB,CAEzB,CAAC","sourcesContent":["import axios from 'axios';\n\nimport { REQUEST, SUCCESS, FAILURE } from 'app/shared/reducers/action-type.util';\n\nexport const ACTION_TYPES = {\n  RESET_PASSWORD_INIT: 'passwordReset/RESET_PASSWORD_INIT',\n  RESET_PASSWORD_FINISH: 'passwordReset/RESET_PASSWORD_FINISH',\n  RESET: 'passwordReset/RESET'\n};\n\nconst initialState = {\n  loading: false,\n  resetPasswordSuccess: false,\n  resetPasswordFailure: false\n};\n\n// Reducer\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.RESET_PASSWORD_FINISH):\n    case REQUEST(ACTION_TYPES.RESET_PASSWORD_INIT):\n      return {\n        ...state,\n        loading: true\n      };\n    case FAILURE(ACTION_TYPES.RESET_PASSWORD_FINISH):\n    case FAILURE(ACTION_TYPES.RESET_PASSWORD_INIT):\n      return {\n        ...initialState,\n        loading: false,\n        resetPasswordFailure: true\n      };\n    case SUCCESS(ACTION_TYPES.RESET_PASSWORD_FINISH):\n    case SUCCESS(ACTION_TYPES.RESET_PASSWORD_INIT):\n      return {\n        ...initialState,\n        loading: false,\n        resetPasswordSuccess: true\n      };\n    case ACTION_TYPES.RESET:\n      return {\n        ...initialState\n      };\n    default:\n      return state;\n  }\n};\n\nconst apiUrl = '/api/account/reset-password';\n\n// Actions\nexport const handlePasswordResetInit = mail => ({\n  type: ACTION_TYPES.RESET_PASSWORD_INIT,\n  // If the content-type isn't set that way, axios will try to encode the body and thus modify the data sent to the server.\n  payload: axios.post(`${apiUrl}/init`, mail, { headers: { ['Content-Type']: 'text/plain' } })\n});\n\nexport const handlePasswordResetFinish = (key, newPassword) => ({\n  type: ACTION_TYPES.RESET_PASSWORD_FINISH,\n  payload: axios.post(`${apiUrl}/finish`, { key, newPassword })\n});\n\nexport const reset = () => ({\n  type: ACTION_TYPES.RESET\n});\n"]}]}