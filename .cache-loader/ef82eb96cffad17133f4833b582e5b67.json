{"remainingRequest":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/thread-loader/dist/cjs.js??ref--4-2!/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/ts-loader/index.js??ref--4-3!/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/tslint-loader/index.js!/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/src/main/webapp/app/modules/account/password-reset/finish/password-reset-finish.tsx","dependencies":[{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/src/main/webapp/app/modules/account/password-reset/finish/password-reset-finish.tsx","mtime":1522786297153},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/react-hot-loader/webpack.js","mtime":1505850161000},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/thread-loader/dist/cjs.js","mtime":0},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/ts-loader/index.js","mtime":1521265445000},{"path":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar React = require(\"react\");\nvar react_redux_1 = require(\"react-redux\");\nvar reactstrap_1 = require(\"reactstrap\");\nvar availity_reactstrap_validation_1 = require(\"availity-reactstrap-validation\");\nvar react_jhipster_1 = require(\"react-jhipster\");\nvar react_router_dom_1 = require(\"react-router-dom\");\nvar password_reset_reducer_1 = require(\"../password-reset.reducer\");\nvar password_strength_bar_1 = require(\"app/shared/layout/password/password-strength-bar\");\nvar actionRequiredAlert = (React.createElement(reactstrap_1.Alert, { color: \"warning\" },\n    React.createElement(react_jhipster_1.Translate, { contentKey: \"reset.finish.messages.info\" }, \"Choose a new password\")));\nvar successAlert = (React.createElement(reactstrap_1.Alert, { color: \"success\" },\n    React.createElement(react_jhipster_1.Translate, { contentKey: \"reset.finish.messages.success\" },\n        React.createElement(\"strong\", null, \"Your password has been reset.\"),\n        \" Please\",\n        ' '),\n    ' ',\n    React.createElement(react_router_dom_1.Link, { className: \"alert-link\", to: \"/login\" },\n        React.createElement(react_jhipster_1.Translate, { contentKey: \"global.messages.info.authenticated.link\" }, \"sign in\")),\n    \".\"));\nvar errorAlert = (React.createElement(reactstrap_1.Alert, { color: \"danger\" },\n    React.createElement(react_jhipster_1.Translate, { contentKey: \"reset.finish.messages.error\" }, \"Your password couldn't be reset. Remember a password request is only valid for 24 hours.\")));\nvar missingArgAlert = (React.createElement(reactstrap_1.Alert, { color: \"danger\" },\n    React.createElement(react_jhipster_1.Translate, { contentKey: \"reset.finish.messages.keymissing\" }, \"The reset key is missing.\")));\nvar PasswordResetFinishPage = /** @class */ (function (_super) {\n    tslib_1.__extends(PasswordResetFinishPage, _super);\n    function PasswordResetFinishPage() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {\n            password: '',\n            key: _this.props.match.params.key\n        };\n        _this.handleValidSubmit = function (event, values) {\n            _this.props.handlePasswordResetFinish(_this.state.key, values.newPassword);\n        };\n        _this.updatePassword = function (event) {\n            _this.setState({ password: event.target.value });\n        };\n        return _this;\n    }\n    PasswordResetFinishPage.prototype.componentWillUnmount = function () {\n        this.props.reset();\n    };\n    PasswordResetFinishPage.prototype.getResetForm = function () {\n        return (React.createElement(availity_reactstrap_validation_1.AvForm, { onValidSubmit: this.handleValidSubmit },\n            React.createElement(availity_reactstrap_validation_1.AvField, { name: \"newPassword\", label: react_jhipster_1.translate('global.form.newpassword'), placeholder: react_jhipster_1.translate('global.form.newpassword.placeholder'), type: \"password\", validate: {\n                    required: { value: true, errorMessage: react_jhipster_1.translate('global.messages.validate.newpassword.required') },\n                    minLength: { value: 4, errorMessage: react_jhipster_1.translate('global.messages.validate.newpassword.minlength') },\n                    maxLength: { value: 50, errorMessage: react_jhipster_1.translate('global.messages.validate.newpassword.maxlength') }\n                }, onChange: this.updatePassword }),\n            React.createElement(password_strength_bar_1.default, { password: this.state.password }),\n            React.createElement(availity_reactstrap_validation_1.AvField, { name: \"confirmPassword\", label: react_jhipster_1.translate('global.form.confirmpassword'), placeholder: react_jhipster_1.translate('global.form.confirmpassword.placeholder'), type: \"password\", validate: {\n                    required: { value: true, errorMessage: react_jhipster_1.translate('global.messages.validate.confirmpassword.required') },\n                    minLength: { value: 4, errorMessage: react_jhipster_1.translate('global.messages.validate.confirmpassword.minlength') },\n                    maxLength: { value: 50, errorMessage: react_jhipster_1.translate('global.messages.validate.confirmpassword.maxlength') },\n                    match: { value: 'newPassword', errorMessage: react_jhipster_1.translate('global.messages.error.dontmatch') }\n                } }),\n            React.createElement(reactstrap_1.Button, { color: \"success\", type: \"submit\" },\n                React.createElement(react_jhipster_1.Translate, { contentKey: \"reset.finish.form.button\" }, \"Validate new password\"))));\n    };\n    PasswordResetFinishPage.prototype.render = function () {\n        var key = this.state.key;\n        var _a = this.props, resetPasswordSuccess = _a.resetPasswordSuccess, resetPasswordFailure = _a.resetPasswordFailure;\n        return (React.createElement(\"div\", null,\n            React.createElement(reactstrap_1.Row, { className: \"justify-content-center\" },\n                React.createElement(reactstrap_1.Col, { md: \"4\" },\n                    React.createElement(\"h1\", null,\n                        React.createElement(react_jhipster_1.Translate, { contentKey: \"reset.finish.title\" }, \"Reset password\")),\n                    key ? actionRequiredAlert : null,\n                    !resetPasswordSuccess && !resetPasswordFailure && !key ? missingArgAlert : null,\n                    resetPasswordSuccess ? successAlert : null,\n                    resetPasswordFailure ? errorAlert : null,\n                    React.createElement(\"div\", null, key ? this.getResetForm() : null)))));\n    };\n    return PasswordResetFinishPage;\n}(React.Component));\nexports.PasswordResetFinishPage = PasswordResetFinishPage;\nvar mapStateToProps = function (_a) {\n    var passwordReset = _a.passwordReset;\n    return ({\n        resetPasswordSuccess: passwordReset.resetPasswordSuccess,\n        resetPasswordFailure: passwordReset.resetPasswordFailure\n    });\n};\nvar mapDispatchToProps = { handlePasswordResetFinish: password_reset_reducer_1.handlePasswordResetFinish, reset: password_reset_reducer_1.reset };\nexports.default = react_redux_1.connect(mapStateToProps, mapDispatchToProps)(PasswordResetFinishPage);\n",{"version":3,"file":"/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/src/main/webapp/app/modules/account/password-reset/finish/password-reset-finish.tsx","sourceRoot":"","sources":["/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/node_modules/tslint-loader/index.js!/Users/julien/workspace/jhipster-automation/samples/jhipster-sample-app-react/src/main/webapp/app/modules/account/password-reset/finish/password-reset-finish.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Alert, Col, Row, Button } from 'reactstrap';\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\nimport { Translate, translate } from 'react-jhipster';\nimport { Link } from 'react-router-dom';\n\nimport { handlePasswordResetFinish, reset } from '../password-reset.reducer';\nimport PasswordStrengthBar from 'app/shared/layout/password/password-strength-bar';\n\nconst actionRequiredAlert = (\n  <Alert color=\"warning\">\n    <Translate contentKey=\"reset.finish.messages.info\">Choose a new password</Translate>\n  </Alert>\n);\n\nconst successAlert = (\n  <Alert color=\"success\">\n    <Translate contentKey=\"reset.finish.messages.success\">\n      <strong>Your password has been reset.</strong> Please{' '}\n    </Translate>{' '}\n    <Link className=\"alert-link\" to=\"/login\">\n      <Translate contentKey=\"global.messages.info.authenticated.link\">sign in</Translate>\n    </Link>.\n  </Alert>\n);\n\nconst errorAlert = (\n  <Alert color=\"danger\">\n    <Translate contentKey=\"reset.finish.messages.error\">\n      Your password couldn't be reset. Remember a password request is only valid for 24 hours.\n    </Translate>\n  </Alert>\n);\n\nconst missingArgAlert = (\n  <Alert color=\"danger\">\n    <Translate contentKey=\"reset.finish.messages.keymissing\">The reset key is missing.</Translate>\n  </Alert>\n);\n\nexport interface IPasswordResetFinishProps {\n  resetPasswordSuccess: boolean;\n  resetPasswordFailure: boolean;\n  handlePasswordResetFinish: Function;\n  reset: Function;\n  match: any;\n}\n\nexport interface IPasswordResetFinishState {\n  password: string;\n  key: string;\n}\n\nexport class PasswordResetFinishPage extends React.Component<IPasswordResetFinishProps, IPasswordResetFinishState> {\n  state: IPasswordResetFinishState = {\n    password: '',\n    key: this.props.match.params.key\n  };\n\n  componentWillUnmount() {\n    this.props.reset();\n  }\n\n  handleValidSubmit = (event, values) => {\n    this.props.handlePasswordResetFinish(this.state.key, values.newPassword);\n  };\n\n  updatePassword = event => {\n    this.setState({ password: event.target.value });\n  };\n\n  getResetForm() {\n    return (\n      <AvForm onValidSubmit={this.handleValidSubmit}>\n        <AvField\n          name=\"newPassword\"\n          label={translate('global.form.newpassword')}\n          placeholder={translate('global.form.newpassword.placeholder')}\n          type=\"password\"\n          validate={{\n            required: { value: true, errorMessage: translate('global.messages.validate.newpassword.required') },\n            minLength: { value: 4, errorMessage: translate('global.messages.validate.newpassword.minlength') },\n            maxLength: { value: 50, errorMessage: translate('global.messages.validate.newpassword.maxlength') }\n          }}\n          onChange={this.updatePassword}\n        />\n        <PasswordStrengthBar password={this.state.password} />\n        <AvField\n          name=\"confirmPassword\"\n          label={translate('global.form.confirmpassword')}\n          placeholder={translate('global.form.confirmpassword.placeholder')}\n          type=\"password\"\n          validate={{\n            required: { value: true, errorMessage: translate('global.messages.validate.confirmpassword.required') },\n            minLength: { value: 4, errorMessage: translate('global.messages.validate.confirmpassword.minlength') },\n            maxLength: { value: 50, errorMessage: translate('global.messages.validate.confirmpassword.maxlength') },\n            match: { value: 'newPassword', errorMessage: translate('global.messages.error.dontmatch') }\n          }}\n        />\n        <Button color=\"success\" type=\"submit\">\n          <Translate contentKey=\"reset.finish.form.button\">Validate new password</Translate>\n        </Button>\n      </AvForm>\n    );\n  }\n\n  render() {\n    const { key } = this.state;\n    const { resetPasswordSuccess, resetPasswordFailure } = this.props;\n\n    return (\n      <div>\n        <Row className=\"justify-content-center\">\n          <Col md=\"4\">\n            <h1>\n              <Translate contentKey=\"reset.finish.title\">Reset password</Translate>\n            </h1>\n            {key ? actionRequiredAlert : null}\n            {!resetPasswordSuccess && !resetPasswordFailure && !key ? missingArgAlert : null}\n            {resetPasswordSuccess ? successAlert : null}\n            {resetPasswordFailure ? errorAlert : null}\n            <div>{key ? this.getResetForm() : null}</div>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ passwordReset }) => ({\n  resetPasswordSuccess: passwordReset.resetPasswordSuccess,\n  resetPasswordFailure: passwordReset.resetPasswordFailure\n});\n\nconst mapDispatchToProps = { handlePasswordResetFinish, reset };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PasswordResetFinishPage);\n"]}]}